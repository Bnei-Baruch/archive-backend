// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Playlist is an object representing the database table.
type Playlist struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID  string      `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Parameters null.JSON   `boil:"parameters" json:"parameters,omitempty" toml:"parameters" yaml:"parameters,omitempty"`
	Public     null.Bool   `boil:"public" json:"public,omitempty" toml:"public" yaml:"public,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LastPlayed null.String `boil:"last_played" json:"last_played,omitempty" toml:"last_played" yaml:"last_played,omitempty"`

	R *playlistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playlistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaylistColumns = struct {
	ID         string
	AccountID  string
	Name       string
	Parameters string
	Public     string
	CreatedAt  string
	LastPlayed string
}{
	ID:         "id",
	AccountID:  "account_id",
	Name:       "name",
	Parameters: "parameters",
	Public:     "public",
	CreatedAt:  "created_at",
	LastPlayed: "last_played",
}

var PlaylistTableColumns = struct {
	ID         string
	AccountID  string
	Name       string
	Parameters string
	Public     string
	CreatedAt  string
	LastPlayed string
}{
	ID:         "playlist.id",
	AccountID:  "playlist.account_id",
	Name:       "playlist.name",
	Parameters: "playlist.parameters",
	Public:     "playlist.public",
	CreatedAt:  "playlist.created_at",
	LastPlayed: "playlist.last_played",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PlaylistWhere = struct {
	ID         whereHelperint64
	AccountID  whereHelperstring
	Name       whereHelpernull_String
	Parameters whereHelpernull_JSON
	Public     whereHelpernull_Bool
	CreatedAt  whereHelpertime_Time
	LastPlayed whereHelpernull_String
}{
	ID:         whereHelperint64{field: "\"playlist\".\"id\""},
	AccountID:  whereHelperstring{field: "\"playlist\".\"account_id\""},
	Name:       whereHelpernull_String{field: "\"playlist\".\"name\""},
	Parameters: whereHelpernull_JSON{field: "\"playlist\".\"parameters\""},
	Public:     whereHelpernull_Bool{field: "\"playlist\".\"public\""},
	CreatedAt:  whereHelpertime_Time{field: "\"playlist\".\"created_at\""},
	LastPlayed: whereHelpernull_String{field: "\"playlist\".\"last_played\""},
}

// PlaylistRels is where relationship names are stored.
var PlaylistRels = struct {
	PlaylistItems string
}{
	PlaylistItems: "PlaylistItems",
}

// playlistR is where relationships are stored.
type playlistR struct {
	PlaylistItems PlaylistItemSlice `boil:"PlaylistItems" json:"PlaylistItems" toml:"PlaylistItems" yaml:"PlaylistItems"`
}

// NewStruct creates a new relationship struct
func (*playlistR) NewStruct() *playlistR {
	return &playlistR{}
}

// playlistL is where Load methods for each relationship are stored.
type playlistL struct{}

var (
	playlistAllColumns            = []string{"id", "account_id", "name", "parameters", "public", "created_at", "last_played"}
	playlistColumnsWithoutDefault = []string{"account_id", "name", "parameters", "public", "last_played"}
	playlistColumnsWithDefault    = []string{"id", "created_at"}
	playlistPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlaylistSlice is an alias for a slice of pointers to Playlist.
	// This should almost always be used instead of []Playlist.
	PlaylistSlice []*Playlist

	playlistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playlistType                 = reflect.TypeOf(&Playlist{})
	playlistMapping              = queries.MakeStructMapping(playlistType)
	playlistPrimaryKeyMapping, _ = queries.BindMapping(playlistType, playlistMapping, playlistPrimaryKeyColumns)
	playlistInsertCacheMut       sync.RWMutex
	playlistInsertCache          = make(map[string]insertCache)
	playlistUpdateCacheMut       sync.RWMutex
	playlistUpdateCache          = make(map[string]updateCache)
	playlistUpsertCacheMut       sync.RWMutex
	playlistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single playlist record from the query.
func (q playlistQuery) One(exec boil.Executor) (*Playlist, error) {
	o := &Playlist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for playlist")
	}

	return o, nil
}

// All returns all Playlist records from the query.
func (q playlistQuery) All(exec boil.Executor) (PlaylistSlice, error) {
	var o []*Playlist

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Playlist slice")
	}

	return o, nil
}

// Count returns the count of all Playlist records in the query.
func (q playlistQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count playlist rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playlistQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if playlist exists")
	}

	return count > 0, nil
}

// PlaylistItems retrieves all the playlist_item's PlaylistItems with an executor.
func (o *Playlist) PlaylistItems(mods ...qm.QueryMod) playlistItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"playlist_item\".\"playlist_id\"=?", o.ID),
	)

	query := PlaylistItems(queryMods...)
	queries.SetFrom(query.Query, "\"playlist_item\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"playlist_item\".*"})
	}

	return query
}

// LoadPlaylistItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playlistL) LoadPlaylistItems(e boil.Executor, singular bool, maybePlaylist interface{}, mods queries.Applicator) error {
	var slice []*Playlist
	var object *Playlist

	if singular {
		object = maybePlaylist.(*Playlist)
	} else {
		slice = *maybePlaylist.(*[]*Playlist)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playlistR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`playlist_item`),
		qm.WhereIn(`playlist_item.playlist_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load playlist_item")
	}

	var resultSlice []*PlaylistItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice playlist_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on playlist_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for playlist_item")
	}

	if singular {
		object.R.PlaylistItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playlistItemR{}
			}
			foreign.R.Playlist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlaylistID {
				local.R.PlaylistItems = append(local.R.PlaylistItems, foreign)
				if foreign.R == nil {
					foreign.R = &playlistItemR{}
				}
				foreign.R.Playlist = local
				break
			}
		}
	}

	return nil
}

// AddPlaylistItems adds the given related objects to the existing relationships
// of the playlist, optionally inserting them as new records.
// Appends related to o.R.PlaylistItems.
// Sets related.R.Playlist appropriately.
func (o *Playlist) AddPlaylistItems(exec boil.Executor, insert bool, related ...*PlaylistItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlaylistID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"playlist_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"playlist_id"}),
				strmangle.WhereClause("\"", "\"", 2, playlistItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlaylistID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playlistR{
			PlaylistItems: related,
		}
	} else {
		o.R.PlaylistItems = append(o.R.PlaylistItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playlistItemR{
				Playlist: o,
			}
		} else {
			rel.R.Playlist = o
		}
	}
	return nil
}

// Playlists retrieves all the records using an executor.
func Playlists(mods ...qm.QueryMod) playlistQuery {
	mods = append(mods, qm.From("\"playlist\""))
	return playlistQuery{NewQuery(mods...)}
}

// FindPlaylist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlaylist(exec boil.Executor, iD int64, selectCols ...string) (*Playlist, error) {
	playlistObj := &Playlist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"playlist\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playlistObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from playlist")
	}

	return playlistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Playlist) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playlist provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playlistInsertCacheMut.RLock()
	cache, cached := playlistInsertCache[key]
	playlistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playlistAllColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"playlist\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"playlist\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into playlist")
	}

	if !cached {
		playlistInsertCacheMut.Lock()
		playlistInsertCache[key] = cache
		playlistInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Playlist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Playlist) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	playlistUpdateCacheMut.RLock()
	cache, cached := playlistUpdateCache[key]
	playlistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playlistAllColumns,
			playlistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update playlist, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"playlist\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playlistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, append(wl, playlistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update playlist row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for playlist")
	}

	if !cached {
		playlistUpdateCacheMut.Lock()
		playlistUpdateCache[key] = cache
		playlistUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q playlistQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for playlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for playlist")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaylistSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"playlist\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playlistPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playlist")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Playlist) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playlist provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playlistUpsertCacheMut.RLock()
	cache, cached := playlistUpsertCache[key]
	playlistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playlistAllColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			playlistAllColumns,
			playlistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert playlist, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playlistPrimaryKeyColumns))
			copy(conflict, playlistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"playlist\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert playlist")
	}

	if !cached {
		playlistUpsertCacheMut.Lock()
		playlistUpsertCache[key] = cache
		playlistUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Playlist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Playlist) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Playlist provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playlistPrimaryKeyMapping)
	sql := "DELETE FROM \"playlist\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from playlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for playlist")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playlistQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playlistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlist")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaylistSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"playlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlist")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Playlist) Reload(exec boil.Executor) error {
	ret, err := FindPlaylist(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlaylistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"playlist\".* FROM \"playlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaylistSlice")
	}

	*o = slice

	return nil
}

// PlaylistExists checks if the Playlist row exists.
func PlaylistExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"playlist\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if playlist exists")
	}

	return exists, nil
}
