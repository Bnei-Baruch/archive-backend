// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ContentType is an object representing the database table.
type ContentType struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *contentTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentTypeColumns = struct {
	ID          string
	Name        string
	Description string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
}

var ContentTypeTableColumns = struct {
	ID          string
	Name        string
	Description string
}{
	ID:          "content_types.id",
	Name:        "content_types.name",
	Description: "content_types.description",
}

// Generated where

var ContentTypeWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"content_types\".\"id\""},
	Name:        whereHelperstring{field: "\"content_types\".\"name\""},
	Description: whereHelpernull_String{field: "\"content_types\".\"description\""},
}

// ContentTypeRels is where relationship names are stored.
var ContentTypeRels = struct {
	TypeCollections  string
	TypeContentUnits string
}{
	TypeCollections:  "TypeCollections",
	TypeContentUnits: "TypeContentUnits",
}

// contentTypeR is where relationships are stored.
type contentTypeR struct {
	TypeCollections  CollectionSlice  `boil:"TypeCollections" json:"TypeCollections" toml:"TypeCollections" yaml:"TypeCollections"`
	TypeContentUnits ContentUnitSlice `boil:"TypeContentUnits" json:"TypeContentUnits" toml:"TypeContentUnits" yaml:"TypeContentUnits"`
}

// NewStruct creates a new relationship struct
func (*contentTypeR) NewStruct() *contentTypeR {
	return &contentTypeR{}
}

// contentTypeL is where Load methods for each relationship are stored.
type contentTypeL struct{}

var (
	contentTypeAllColumns            = []string{"id", "name", "description"}
	contentTypeColumnsWithoutDefault = []string{"name"}
	contentTypeColumnsWithDefault    = []string{"id", "description"}
	contentTypePrimaryKeyColumns     = []string{"id"}
	contentTypeGeneratedColumns      = []string{}
)

type (
	// ContentTypeSlice is an alias for a slice of pointers to ContentType.
	// This should almost always be used instead of []ContentType.
	ContentTypeSlice []*ContentType

	contentTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentTypeType                 = reflect.TypeOf(&ContentType{})
	contentTypeMapping              = queries.MakeStructMapping(contentTypeType)
	contentTypePrimaryKeyMapping, _ = queries.BindMapping(contentTypeType, contentTypeMapping, contentTypePrimaryKeyColumns)
	contentTypeInsertCacheMut       sync.RWMutex
	contentTypeInsertCache          = make(map[string]insertCache)
	contentTypeUpdateCacheMut       sync.RWMutex
	contentTypeUpdateCache          = make(map[string]updateCache)
	contentTypeUpsertCacheMut       sync.RWMutex
	contentTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single contentType record from the query.
func (q contentTypeQuery) One(exec boil.Executor) (*ContentType, error) {
	o := &ContentType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for content_types")
	}

	return o, nil
}

// All returns all ContentType records from the query.
func (q contentTypeQuery) All(exec boil.Executor) (ContentTypeSlice, error) {
	var o []*ContentType

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to ContentType slice")
	}

	return o, nil
}

// Count returns the count of all ContentType records in the query.
func (q contentTypeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count content_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contentTypeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if content_types exists")
	}

	return count > 0, nil
}

// TypeCollections retrieves all the collection's Collections with an executor via type_id column.
func (o *ContentType) TypeCollections(mods ...qm.QueryMod) collectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"collections\".\"type_id\"=?", o.ID),
	)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"collections\".*"})
	}

	return query
}

// TypeContentUnits retrieves all the content_unit's ContentUnits with an executor via type_id column.
func (o *ContentType) TypeContentUnits(mods ...qm.QueryMod) contentUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"content_units\".\"type_id\"=?", o.ID),
	)

	query := ContentUnits(queryMods...)
	queries.SetFrom(query.Query, "\"content_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"content_units\".*"})
	}

	return query
}

// LoadTypeCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentTypeL) LoadTypeCollections(e boil.Executor, singular bool, maybeContentType interface{}, mods queries.Applicator) error {
	var slice []*ContentType
	var object *ContentType

	if singular {
		object = maybeContentType.(*ContentType)
	} else {
		slice = *maybeContentType.(*[]*ContentType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collections")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if singular {
		object.R.TypeCollections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionR{}
			}
			foreign.R.Type = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TypeID {
				local.R.TypeCollections = append(local.R.TypeCollections, foreign)
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.Type = local
				break
			}
		}
	}

	return nil
}

// LoadTypeContentUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentTypeL) LoadTypeContentUnits(e boil.Executor, singular bool, maybeContentType interface{}, mods queries.Applicator) error {
	var slice []*ContentType
	var object *ContentType

	if singular {
		object = maybeContentType.(*ContentType)
	} else {
		slice = *maybeContentType.(*[]*ContentType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_units`),
		qm.WhereIn(`content_units.type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load content_units")
	}

	var resultSlice []*ContentUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice content_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on content_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_units")
	}

	if singular {
		object.R.TypeContentUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contentUnitR{}
			}
			foreign.R.Type = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TypeID {
				local.R.TypeContentUnits = append(local.R.TypeContentUnits, foreign)
				if foreign.R == nil {
					foreign.R = &contentUnitR{}
				}
				foreign.R.Type = local
				break
			}
		}
	}

	return nil
}

// AddTypeCollections adds the given related objects to the existing relationships
// of the content_type, optionally inserting them as new records.
// Appends related to o.R.TypeCollections.
// Sets related.R.Type appropriately.
func (o *ContentType) AddTypeCollections(exec boil.Executor, insert bool, related ...*Collection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"collections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
				strmangle.WhereClause("\"", "\"", 2, collectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentTypeR{
			TypeCollections: related,
		}
	} else {
		o.R.TypeCollections = append(o.R.TypeCollections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionR{
				Type: o,
			}
		} else {
			rel.R.Type = o
		}
	}
	return nil
}

// AddTypeContentUnits adds the given related objects to the existing relationships
// of the content_type, optionally inserting them as new records.
// Appends related to o.R.TypeContentUnits.
// Sets related.R.Type appropriately.
func (o *ContentType) AddTypeContentUnits(exec boil.Executor, insert bool, related ...*ContentUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"content_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
				strmangle.WhereClause("\"", "\"", 2, contentUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentTypeR{
			TypeContentUnits: related,
		}
	} else {
		o.R.TypeContentUnits = append(o.R.TypeContentUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contentUnitR{
				Type: o,
			}
		} else {
			rel.R.Type = o
		}
	}
	return nil
}

// ContentTypes retrieves all the records using an executor.
func ContentTypes(mods ...qm.QueryMod) contentTypeQuery {
	mods = append(mods, qm.From("\"content_types\""))
	return contentTypeQuery{NewQuery(mods...)}
}

// FindContentType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentType(exec boil.Executor, iD int64, selectCols ...string) (*ContentType, error) {
	contentTypeObj := &ContentType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"content_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, contentTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from content_types")
	}

	return contentTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentType) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no content_types provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(contentTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentTypeInsertCacheMut.RLock()
	cache, cached := contentTypeInsertCache[key]
	contentTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentTypeAllColumns,
			contentTypeColumnsWithDefault,
			contentTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentTypeType, contentTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentTypeType, contentTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"content_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"content_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into content_types")
	}

	if !cached {
		contentTypeInsertCacheMut.Lock()
		contentTypeInsertCache[key] = cache
		contentTypeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ContentType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentType) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	contentTypeUpdateCacheMut.RLock()
	cache, cached := contentTypeUpdateCache[key]
	contentTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentTypeAllColumns,
			contentTypePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mdbmodels: unable to update content_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"content_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contentTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentTypeType, contentTypeMapping, append(wl, contentTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update content_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by update for content_types")
	}

	if !cached {
		contentTypeUpdateCacheMut.Lock()
		contentTypeUpdateCache[key] = cache
		contentTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q contentTypeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all for content_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected for content_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentTypeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"content_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contentTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all in contentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected all in update all contentType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContentType) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no content_types provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(contentTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentTypeUpsertCacheMut.RLock()
	cache, cached := contentTypeUpsertCache[key]
	contentTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contentTypeAllColumns,
			contentTypeColumnsWithDefault,
			contentTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentTypeAllColumns,
			contentTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert content_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(contentTypePrimaryKeyColumns))
			copy(conflict, contentTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"content_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(contentTypeType, contentTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentTypeType, contentTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert content_types")
	}

	if !cached {
		contentTypeUpsertCacheMut.Lock()
		contentTypeUpsertCache[key] = cache
		contentTypeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ContentType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentType) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdbmodels: no ContentType provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentTypePrimaryKeyMapping)
	sql := "DELETE FROM \"content_types\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete from content_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by delete for content_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contentTypeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdbmodels: no contentTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from content_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for content_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentTypeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"content_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from contentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for content_types")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentType) Reload(exec boil.Executor) error {
	ret, err := FindContentType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"content_types\".* FROM \"content_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in ContentTypeSlice")
	}

	*o = slice

	return nil
}

// ContentTypeExists checks if the ContentType row exists.
func ContentTypeExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"content_types\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if content_types exists")
	}

	return exists, nil
}
