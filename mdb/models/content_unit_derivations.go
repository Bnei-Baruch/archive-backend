// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ContentUnitDerivation is an object representing the database table.
type ContentUnitDerivation struct {
	SourceID  int64  `boil:"source_id" json:"source_id" toml:"source_id" yaml:"source_id"`
	DerivedID int64  `boil:"derived_id" json:"derived_id" toml:"derived_id" yaml:"derived_id"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *contentUnitDerivationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentUnitDerivationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentUnitDerivationColumns = struct {
	SourceID  string
	DerivedID string
	Name      string
}{
	SourceID:  "source_id",
	DerivedID: "derived_id",
	Name:      "name",
}

var ContentUnitDerivationTableColumns = struct {
	SourceID  string
	DerivedID string
	Name      string
}{
	SourceID:  "content_unit_derivations.source_id",
	DerivedID: "content_unit_derivations.derived_id",
	Name:      "content_unit_derivations.name",
}

// Generated where

var ContentUnitDerivationWhere = struct {
	SourceID  whereHelperint64
	DerivedID whereHelperint64
	Name      whereHelperstring
}{
	SourceID:  whereHelperint64{field: "\"content_unit_derivations\".\"source_id\""},
	DerivedID: whereHelperint64{field: "\"content_unit_derivations\".\"derived_id\""},
	Name:      whereHelperstring{field: "\"content_unit_derivations\".\"name\""},
}

// ContentUnitDerivationRels is where relationship names are stored.
var ContentUnitDerivationRels = struct {
	Derived string
	Source  string
}{
	Derived: "Derived",
	Source:  "Source",
}

// contentUnitDerivationR is where relationships are stored.
type contentUnitDerivationR struct {
	Derived *ContentUnit `boil:"Derived" json:"Derived" toml:"Derived" yaml:"Derived"`
	Source  *ContentUnit `boil:"Source" json:"Source" toml:"Source" yaml:"Source"`
}

// NewStruct creates a new relationship struct
func (*contentUnitDerivationR) NewStruct() *contentUnitDerivationR {
	return &contentUnitDerivationR{}
}

// contentUnitDerivationL is where Load methods for each relationship are stored.
type contentUnitDerivationL struct{}

var (
	contentUnitDerivationAllColumns            = []string{"source_id", "derived_id", "name"}
	contentUnitDerivationColumnsWithoutDefault = []string{"source_id", "derived_id", "name"}
	contentUnitDerivationColumnsWithDefault    = []string{}
	contentUnitDerivationPrimaryKeyColumns     = []string{"source_id", "derived_id"}
	contentUnitDerivationGeneratedColumns      = []string{}
)

type (
	// ContentUnitDerivationSlice is an alias for a slice of pointers to ContentUnitDerivation.
	// This should almost always be used instead of []ContentUnitDerivation.
	ContentUnitDerivationSlice []*ContentUnitDerivation

	contentUnitDerivationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentUnitDerivationType                 = reflect.TypeOf(&ContentUnitDerivation{})
	contentUnitDerivationMapping              = queries.MakeStructMapping(contentUnitDerivationType)
	contentUnitDerivationPrimaryKeyMapping, _ = queries.BindMapping(contentUnitDerivationType, contentUnitDerivationMapping, contentUnitDerivationPrimaryKeyColumns)
	contentUnitDerivationInsertCacheMut       sync.RWMutex
	contentUnitDerivationInsertCache          = make(map[string]insertCache)
	contentUnitDerivationUpdateCacheMut       sync.RWMutex
	contentUnitDerivationUpdateCache          = make(map[string]updateCache)
	contentUnitDerivationUpsertCacheMut       sync.RWMutex
	contentUnitDerivationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single contentUnitDerivation record from the query.
func (q contentUnitDerivationQuery) One(exec boil.Executor) (*ContentUnitDerivation, error) {
	o := &ContentUnitDerivation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for content_unit_derivations")
	}

	return o, nil
}

// All returns all ContentUnitDerivation records from the query.
func (q contentUnitDerivationQuery) All(exec boil.Executor) (ContentUnitDerivationSlice, error) {
	var o []*ContentUnitDerivation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to ContentUnitDerivation slice")
	}

	return o, nil
}

// Count returns the count of all ContentUnitDerivation records in the query.
func (q contentUnitDerivationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count content_unit_derivations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contentUnitDerivationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if content_unit_derivations exists")
	}

	return count > 0, nil
}

// Derived pointed to by the foreign key.
func (o *ContentUnitDerivation) Derived(mods ...qm.QueryMod) contentUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DerivedID),
	}

	queryMods = append(queryMods, mods...)

	query := ContentUnits(queryMods...)
	queries.SetFrom(query.Query, "\"content_units\"")

	return query
}

// Source pointed to by the foreign key.
func (o *ContentUnitDerivation) Source(mods ...qm.QueryMod) contentUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SourceID),
	}

	queryMods = append(queryMods, mods...)

	query := ContentUnits(queryMods...)
	queries.SetFrom(query.Query, "\"content_units\"")

	return query
}

// LoadDerived allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentUnitDerivationL) LoadDerived(e boil.Executor, singular bool, maybeContentUnitDerivation interface{}, mods queries.Applicator) error {
	var slice []*ContentUnitDerivation
	var object *ContentUnitDerivation

	if singular {
		object = maybeContentUnitDerivation.(*ContentUnitDerivation)
	} else {
		slice = *maybeContentUnitDerivation.(*[]*ContentUnitDerivation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitDerivationR{}
		}
		args = append(args, object.DerivedID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitDerivationR{}
			}

			for _, a := range args {
				if a == obj.DerivedID {
					continue Outer
				}
			}

			args = append(args, obj.DerivedID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_units`),
		qm.WhereIn(`content_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentUnit")
	}

	var resultSlice []*ContentUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_units")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Derived = foreign
		if foreign.R == nil {
			foreign.R = &contentUnitR{}
		}
		foreign.R.DerivedContentUnitDerivations = append(foreign.R.DerivedContentUnitDerivations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DerivedID == foreign.ID {
				local.R.Derived = foreign
				if foreign.R == nil {
					foreign.R = &contentUnitR{}
				}
				foreign.R.DerivedContentUnitDerivations = append(foreign.R.DerivedContentUnitDerivations, local)
				break
			}
		}
	}

	return nil
}

// LoadSource allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentUnitDerivationL) LoadSource(e boil.Executor, singular bool, maybeContentUnitDerivation interface{}, mods queries.Applicator) error {
	var slice []*ContentUnitDerivation
	var object *ContentUnitDerivation

	if singular {
		object = maybeContentUnitDerivation.(*ContentUnitDerivation)
	} else {
		slice = *maybeContentUnitDerivation.(*[]*ContentUnitDerivation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitDerivationR{}
		}
		args = append(args, object.SourceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitDerivationR{}
			}

			for _, a := range args {
				if a == obj.SourceID {
					continue Outer
				}
			}

			args = append(args, obj.SourceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_units`),
		qm.WhereIn(`content_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentUnit")
	}

	var resultSlice []*ContentUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_units")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Source = foreign
		if foreign.R == nil {
			foreign.R = &contentUnitR{}
		}
		foreign.R.SourceContentUnitDerivations = append(foreign.R.SourceContentUnitDerivations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SourceID == foreign.ID {
				local.R.Source = foreign
				if foreign.R == nil {
					foreign.R = &contentUnitR{}
				}
				foreign.R.SourceContentUnitDerivations = append(foreign.R.SourceContentUnitDerivations, local)
				break
			}
		}
	}

	return nil
}

// SetDerived of the contentUnitDerivation to the related item.
// Sets o.R.Derived to related.
// Adds o to related.R.DerivedContentUnitDerivations.
func (o *ContentUnitDerivation) SetDerived(exec boil.Executor, insert bool, related *ContentUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_unit_derivations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"derived_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentUnitDerivationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SourceID, o.DerivedID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DerivedID = related.ID
	if o.R == nil {
		o.R = &contentUnitDerivationR{
			Derived: related,
		}
	} else {
		o.R.Derived = related
	}

	if related.R == nil {
		related.R = &contentUnitR{
			DerivedContentUnitDerivations: ContentUnitDerivationSlice{o},
		}
	} else {
		related.R.DerivedContentUnitDerivations = append(related.R.DerivedContentUnitDerivations, o)
	}

	return nil
}

// SetSource of the contentUnitDerivation to the related item.
// Sets o.R.Source to related.
// Adds o to related.R.SourceContentUnitDerivations.
func (o *ContentUnitDerivation) SetSource(exec boil.Executor, insert bool, related *ContentUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_unit_derivations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"source_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentUnitDerivationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SourceID, o.DerivedID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SourceID = related.ID
	if o.R == nil {
		o.R = &contentUnitDerivationR{
			Source: related,
		}
	} else {
		o.R.Source = related
	}

	if related.R == nil {
		related.R = &contentUnitR{
			SourceContentUnitDerivations: ContentUnitDerivationSlice{o},
		}
	} else {
		related.R.SourceContentUnitDerivations = append(related.R.SourceContentUnitDerivations, o)
	}

	return nil
}

// ContentUnitDerivations retrieves all the records using an executor.
func ContentUnitDerivations(mods ...qm.QueryMod) contentUnitDerivationQuery {
	mods = append(mods, qm.From("\"content_unit_derivations\""))
	return contentUnitDerivationQuery{NewQuery(mods...)}
}

// FindContentUnitDerivation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentUnitDerivation(exec boil.Executor, sourceID int64, derivedID int64, selectCols ...string) (*ContentUnitDerivation, error) {
	contentUnitDerivationObj := &ContentUnitDerivation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"content_unit_derivations\" where \"source_id\"=$1 AND \"derived_id\"=$2", sel,
	)

	q := queries.Raw(query, sourceID, derivedID)

	err := q.Bind(nil, exec, contentUnitDerivationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from content_unit_derivations")
	}

	return contentUnitDerivationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentUnitDerivation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no content_unit_derivations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(contentUnitDerivationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentUnitDerivationInsertCacheMut.RLock()
	cache, cached := contentUnitDerivationInsertCache[key]
	contentUnitDerivationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentUnitDerivationAllColumns,
			contentUnitDerivationColumnsWithDefault,
			contentUnitDerivationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentUnitDerivationType, contentUnitDerivationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentUnitDerivationType, contentUnitDerivationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"content_unit_derivations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"content_unit_derivations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into content_unit_derivations")
	}

	if !cached {
		contentUnitDerivationInsertCacheMut.Lock()
		contentUnitDerivationInsertCache[key] = cache
		contentUnitDerivationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ContentUnitDerivation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentUnitDerivation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	contentUnitDerivationUpdateCacheMut.RLock()
	cache, cached := contentUnitDerivationUpdateCache[key]
	contentUnitDerivationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentUnitDerivationAllColumns,
			contentUnitDerivationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mdbmodels: unable to update content_unit_derivations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"content_unit_derivations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contentUnitDerivationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentUnitDerivationType, contentUnitDerivationMapping, append(wl, contentUnitDerivationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update content_unit_derivations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by update for content_unit_derivations")
	}

	if !cached {
		contentUnitDerivationUpdateCacheMut.Lock()
		contentUnitDerivationUpdateCache[key] = cache
		contentUnitDerivationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q contentUnitDerivationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all for content_unit_derivations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected for content_unit_derivations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentUnitDerivationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitDerivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"content_unit_derivations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contentUnitDerivationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all in contentUnitDerivation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected all in update all contentUnitDerivation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContentUnitDerivation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no content_unit_derivations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(contentUnitDerivationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentUnitDerivationUpsertCacheMut.RLock()
	cache, cached := contentUnitDerivationUpsertCache[key]
	contentUnitDerivationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contentUnitDerivationAllColumns,
			contentUnitDerivationColumnsWithDefault,
			contentUnitDerivationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentUnitDerivationAllColumns,
			contentUnitDerivationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert content_unit_derivations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(contentUnitDerivationPrimaryKeyColumns))
			copy(conflict, contentUnitDerivationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"content_unit_derivations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(contentUnitDerivationType, contentUnitDerivationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentUnitDerivationType, contentUnitDerivationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert content_unit_derivations")
	}

	if !cached {
		contentUnitDerivationUpsertCacheMut.Lock()
		contentUnitDerivationUpsertCache[key] = cache
		contentUnitDerivationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ContentUnitDerivation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentUnitDerivation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdbmodels: no ContentUnitDerivation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentUnitDerivationPrimaryKeyMapping)
	sql := "DELETE FROM \"content_unit_derivations\" WHERE \"source_id\"=$1 AND \"derived_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete from content_unit_derivations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by delete for content_unit_derivations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contentUnitDerivationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdbmodels: no contentUnitDerivationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from content_unit_derivations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for content_unit_derivations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentUnitDerivationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitDerivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"content_unit_derivations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentUnitDerivationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from contentUnitDerivation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for content_unit_derivations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentUnitDerivation) Reload(exec boil.Executor) error {
	ret, err := FindContentUnitDerivation(exec, o.SourceID, o.DerivedID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentUnitDerivationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentUnitDerivationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitDerivationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"content_unit_derivations\".* FROM \"content_unit_derivations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentUnitDerivationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in ContentUnitDerivationSlice")
	}

	*o = slice

	return nil
}

// ContentUnitDerivationExists checks if the ContentUnitDerivation row exists.
func ContentUnitDerivationExists(exec boil.Executor, sourceID int64, derivedID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"content_unit_derivations\" where \"source_id\"=$1 AND \"derived_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, sourceID, derivedID)
	}
	row := exec.QueryRow(sql, sourceID, derivedID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if content_unit_derivations exists")
	}

	return exists, nil
}
