// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlaylistItem is an object representing the database table.
type PlaylistItem struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlaylistID     int64     `boil:"playlist_id" json:"playlist_id" toml:"playlist_id" yaml:"playlist_id"`
	Position       null.Int  `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	ContentUnitUID string    `boil:"content_unit_uid" json:"content_unit_uid" toml:"content_unit_uid" yaml:"content_unit_uid"`
	AddedAt        time.Time `boil:"added_at" json:"added_at" toml:"added_at" yaml:"added_at"`

	R *playlistItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playlistItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaylistItemColumns = struct {
	ID             string
	PlaylistID     string
	Position       string
	ContentUnitUID string
	AddedAt        string
}{
	ID:             "id",
	PlaylistID:     "playlist_id",
	Position:       "position",
	ContentUnitUID: "content_unit_uid",
	AddedAt:        "added_at",
}

var PlaylistItemTableColumns = struct {
	ID             string
	PlaylistID     string
	Position       string
	ContentUnitUID string
	AddedAt        string
}{
	ID:             "playlist_item.id",
	PlaylistID:     "playlist_item.playlist_id",
	Position:       "playlist_item.position",
	ContentUnitUID: "playlist_item.content_unit_uid",
	AddedAt:        "playlist_item.added_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PlaylistItemWhere = struct {
	ID             whereHelperint64
	PlaylistID     whereHelperint64
	Position       whereHelpernull_Int
	ContentUnitUID whereHelperstring
	AddedAt        whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "\"playlist_item\".\"id\""},
	PlaylistID:     whereHelperint64{field: "\"playlist_item\".\"playlist_id\""},
	Position:       whereHelpernull_Int{field: "\"playlist_item\".\"position\""},
	ContentUnitUID: whereHelperstring{field: "\"playlist_item\".\"content_unit_uid\""},
	AddedAt:        whereHelpertime_Time{field: "\"playlist_item\".\"added_at\""},
}

// PlaylistItemRels is where relationship names are stored.
var PlaylistItemRels = struct {
	Playlist string
}{
	Playlist: "Playlist",
}

// playlistItemR is where relationships are stored.
type playlistItemR struct {
	Playlist *Playlist `boil:"Playlist" json:"Playlist" toml:"Playlist" yaml:"Playlist"`
}

// NewStruct creates a new relationship struct
func (*playlistItemR) NewStruct() *playlistItemR {
	return &playlistItemR{}
}

// playlistItemL is where Load methods for each relationship are stored.
type playlistItemL struct{}

var (
	playlistItemAllColumns            = []string{"id", "playlist_id", "position", "content_unit_uid", "added_at"}
	playlistItemColumnsWithoutDefault = []string{"playlist_id", "position", "content_unit_uid"}
	playlistItemColumnsWithDefault    = []string{"id", "added_at"}
	playlistItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlaylistItemSlice is an alias for a slice of pointers to PlaylistItem.
	// This should almost always be used instead of []PlaylistItem.
	PlaylistItemSlice []*PlaylistItem
	// PlaylistItemHook is the signature for custom PlaylistItem hook methods
	PlaylistItemHook func(context.Context, boil.ContextExecutor, *PlaylistItem) error

	playlistItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playlistItemType                 = reflect.TypeOf(&PlaylistItem{})
	playlistItemMapping              = queries.MakeStructMapping(playlistItemType)
	playlistItemPrimaryKeyMapping, _ = queries.BindMapping(playlistItemType, playlistItemMapping, playlistItemPrimaryKeyColumns)
	playlistItemInsertCacheMut       sync.RWMutex
	playlistItemInsertCache          = make(map[string]insertCache)
	playlistItemUpdateCacheMut       sync.RWMutex
	playlistItemUpdateCache          = make(map[string]updateCache)
	playlistItemUpsertCacheMut       sync.RWMutex
	playlistItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playlistItemBeforeInsertHooks []PlaylistItemHook
var playlistItemBeforeUpdateHooks []PlaylistItemHook
var playlistItemBeforeDeleteHooks []PlaylistItemHook
var playlistItemBeforeUpsertHooks []PlaylistItemHook

var playlistItemAfterInsertHooks []PlaylistItemHook
var playlistItemAfterSelectHooks []PlaylistItemHook
var playlistItemAfterUpdateHooks []PlaylistItemHook
var playlistItemAfterDeleteHooks []PlaylistItemHook
var playlistItemAfterUpsertHooks []PlaylistItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlaylistItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlaylistItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlaylistItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlaylistItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlaylistItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlaylistItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlaylistItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlaylistItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlaylistItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playlistItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlaylistItemHook registers your hook function for all future operations.
func AddPlaylistItemHook(hookPoint boil.HookPoint, playlistItemHook PlaylistItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		playlistItemBeforeInsertHooks = append(playlistItemBeforeInsertHooks, playlistItemHook)
	case boil.BeforeUpdateHook:
		playlistItemBeforeUpdateHooks = append(playlistItemBeforeUpdateHooks, playlistItemHook)
	case boil.BeforeDeleteHook:
		playlistItemBeforeDeleteHooks = append(playlistItemBeforeDeleteHooks, playlistItemHook)
	case boil.BeforeUpsertHook:
		playlistItemBeforeUpsertHooks = append(playlistItemBeforeUpsertHooks, playlistItemHook)
	case boil.AfterInsertHook:
		playlistItemAfterInsertHooks = append(playlistItemAfterInsertHooks, playlistItemHook)
	case boil.AfterSelectHook:
		playlistItemAfterSelectHooks = append(playlistItemAfterSelectHooks, playlistItemHook)
	case boil.AfterUpdateHook:
		playlistItemAfterUpdateHooks = append(playlistItemAfterUpdateHooks, playlistItemHook)
	case boil.AfterDeleteHook:
		playlistItemAfterDeleteHooks = append(playlistItemAfterDeleteHooks, playlistItemHook)
	case boil.AfterUpsertHook:
		playlistItemAfterUpsertHooks = append(playlistItemAfterUpsertHooks, playlistItemHook)
	}
}

// One returns a single playlistItem record from the query.
func (q playlistItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PlaylistItem, error) {
	o := &PlaylistItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for playlist_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlaylistItem records from the query.
func (q playlistItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlaylistItemSlice, error) {
	var o []*PlaylistItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PlaylistItem slice")
	}

	if len(playlistItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlaylistItem records in the query.
func (q playlistItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count playlist_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playlistItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if playlist_item exists")
	}

	return count > 0, nil
}

// Playlist pointed to by the foreign key.
func (o *PlaylistItem) Playlist(mods ...qm.QueryMod) playlistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlaylistID),
	}

	queryMods = append(queryMods, mods...)

	query := Playlists(queryMods...)
	queries.SetFrom(query.Query, "\"playlist\"")

	return query
}

// LoadPlaylist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playlistItemL) LoadPlaylist(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlaylistItem interface{}, mods queries.Applicator) error {
	var slice []*PlaylistItem
	var object *PlaylistItem

	if singular {
		object = maybePlaylistItem.(*PlaylistItem)
	} else {
		slice = *maybePlaylistItem.(*[]*PlaylistItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playlistItemR{}
		}
		args = append(args, object.PlaylistID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistItemR{}
			}

			for _, a := range args {
				if a == obj.PlaylistID {
					continue Outer
				}
			}

			args = append(args, obj.PlaylistID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`playlist`),
		qm.WhereIn(`playlist.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Playlist")
	}

	var resultSlice []*Playlist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Playlist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for playlist")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for playlist")
	}

	if len(playlistItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Playlist = foreign
		if foreign.R == nil {
			foreign.R = &playlistR{}
		}
		foreign.R.PlaylistItems = append(foreign.R.PlaylistItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlaylistID == foreign.ID {
				local.R.Playlist = foreign
				if foreign.R == nil {
					foreign.R = &playlistR{}
				}
				foreign.R.PlaylistItems = append(foreign.R.PlaylistItems, local)
				break
			}
		}
	}

	return nil
}

// SetPlaylist of the playlistItem to the related item.
// Sets o.R.Playlist to related.
// Adds o to related.R.PlaylistItems.
func (o *PlaylistItem) SetPlaylist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Playlist) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"playlist_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"playlist_id"}),
		strmangle.WhereClause("\"", "\"", 2, playlistItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlaylistID = related.ID
	if o.R == nil {
		o.R = &playlistItemR{
			Playlist: related,
		}
	} else {
		o.R.Playlist = related
	}

	if related.R == nil {
		related.R = &playlistR{
			PlaylistItems: PlaylistItemSlice{o},
		}
	} else {
		related.R.PlaylistItems = append(related.R.PlaylistItems, o)
	}

	return nil
}

// PlaylistItems retrieves all the records using an executor.
func PlaylistItems(mods ...qm.QueryMod) playlistItemQuery {
	mods = append(mods, qm.From("\"playlist_item\""))
	return playlistItemQuery{NewQuery(mods...)}
}

// FindPlaylistItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlaylistItem(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PlaylistItem, error) {
	playlistItemObj := &PlaylistItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"playlist_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, playlistItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from playlist_item")
	}

	if err = playlistItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return playlistItemObj, err
	}

	return playlistItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlaylistItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playlist_item provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playlistItemInsertCacheMut.RLock()
	cache, cached := playlistItemInsertCache[key]
	playlistItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playlistItemAllColumns,
			playlistItemColumnsWithDefault,
			playlistItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"playlist_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"playlist_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into playlist_item")
	}

	if !cached {
		playlistItemInsertCacheMut.Lock()
		playlistItemInsertCache[key] = cache
		playlistItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PlaylistItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlaylistItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playlistItemUpdateCacheMut.RLock()
	cache, cached := playlistItemUpdateCache[key]
	playlistItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playlistItemAllColumns,
			playlistItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update playlist_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"playlist_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playlistItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, append(wl, playlistItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update playlist_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for playlist_item")
	}

	if !cached {
		playlistItemUpdateCacheMut.Lock()
		playlistItemUpdateCache[key] = cache
		playlistItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playlistItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for playlist_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for playlist_item")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaylistItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"playlist_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playlistItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in playlistItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all playlistItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlaylistItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no playlist_item provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playlistItemUpsertCacheMut.RLock()
	cache, cached := playlistItemUpsertCache[key]
	playlistItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playlistItemAllColumns,
			playlistItemColumnsWithDefault,
			playlistItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			playlistItemAllColumns,
			playlistItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert playlist_item, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playlistItemPrimaryKeyColumns))
			copy(conflict, playlistItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"playlist_item\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert playlist_item")
	}

	if !cached {
		playlistItemUpsertCacheMut.Lock()
		playlistItemUpsertCache[key] = cache
		playlistItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PlaylistItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlaylistItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PlaylistItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playlistItemPrimaryKeyMapping)
	sql := "DELETE FROM \"playlist_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from playlist_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for playlist_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playlistItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playlistItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlist_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlist_item")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaylistItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playlistItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"playlist_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from playlistItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for playlist_item")
	}

	if len(playlistItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlaylistItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlaylistItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlaylistItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"playlist_item\".* FROM \"playlist_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaylistItemSlice")
	}

	*o = slice

	return nil
}

// PlaylistItemExists checks if the PlaylistItem row exists.
func PlaylistItemExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"playlist_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if playlist_item exists")
	}

	return exists, nil
}
