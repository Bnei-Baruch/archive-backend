// Code generated by SQLBoiler (https://github.com/Bnei-Baruch/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/Bnei-Baruch/sqlboiler/boil"
	"github.com/Bnei-Baruch/sqlboiler/randomize"
	"github.com/Bnei-Baruch/sqlboiler/strmangle"
)

func testLikes(t *testing.T) {
	t.Parallel()

	query := Likes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testLikesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = like.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLikesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Likes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLikesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := LikeSlice{like}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testLikesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := LikeExists(tx, like.ID)
	if err != nil {
		t.Errorf("Unable to check if Like exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LikeExistsG to return true, but got false.")
	}
}
func testLikesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	likeFound, err := FindLike(tx, like.ID)
	if err != nil {
		t.Error(err)
	}

	if likeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testLikesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Likes(tx).Bind(like); err != nil {
		t.Error(err)
	}
}

func testLikesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Likes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLikesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	likeOne := &Like{}
	likeTwo := &Like{}
	if err = randomize.Struct(seed, likeOne, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}
	if err = randomize.Struct(seed, likeTwo, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = likeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = likeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Likes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLikesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	likeOne := &Like{}
	likeTwo := &Like{}
	if err = randomize.Struct(seed, likeOne, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}
	if err = randomize.Struct(seed, likeTwo, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = likeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = likeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testLikesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLikesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx, likeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLikesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = like.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testLikesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := LikeSlice{like}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testLikesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Likes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	likeDBTypes = map[string]string{`AccountID`: `character varying`, `ContentUnitUID`: `character varying`, `CreatedAt`: `timestamp with time zone`, `ID`: `bigint`}
	_           = bytes.MinRead
)

func testLikesUpdate(t *testing.T) {
	t.Parallel()

	if len(likeColumns) == len(likePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	if err = like.Update(tx); err != nil {
		t.Error(err)
	}
}

func testLikesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(likeColumns) == len(likePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	like := &Like{}
	if err = randomize.Struct(seed, like, likeDBTypes, true, likeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, like, likeDBTypes, true, likePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(likeColumns, likePrimaryKeyColumns) {
		fields = likeColumns
	} else {
		fields = strmangle.SetComplement(
			likeColumns,
			likePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(like))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := LikeSlice{like}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testLikesUpsert(t *testing.T) {
	t.Parallel()

	if len(likeColumns) == len(likePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	like := Like{}
	if err = randomize.Struct(seed, &like, likeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = like.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Like: %s", err)
	}

	count, err := Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &like, likeDBTypes, false, likePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Like struct: %s", err)
	}

	if err = like.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Like: %s", err)
	}

	count, err = Likes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
