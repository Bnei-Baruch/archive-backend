// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TwitterTweet is an object representing the database table.
type TwitterTweet struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TwitterID string    `boil:"twitter_id" json:"twitter_id" toml:"twitter_id" yaml:"twitter_id"`
	FullText  string    `boil:"full_text" json:"full_text" toml:"full_text" yaml:"full_text"`
	TweetAt   time.Time `boil:"tweet_at" json:"tweet_at" toml:"tweet_at" yaml:"tweet_at"`
	Raw       null.JSON `boil:"raw" json:"raw,omitempty" toml:"raw" yaml:"raw,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *twitterTweetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L twitterTweetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TwitterTweetColumns = struct {
	ID        string
	UserID    string
	TwitterID string
	FullText  string
	TweetAt   string
	Raw       string
	CreatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	TwitterID: "twitter_id",
	FullText:  "full_text",
	TweetAt:   "tweet_at",
	Raw:       "raw",
	CreatedAt: "created_at",
}

var TwitterTweetTableColumns = struct {
	ID        string
	UserID    string
	TwitterID string
	FullText  string
	TweetAt   string
	Raw       string
	CreatedAt string
}{
	ID:        "twitter_tweets.id",
	UserID:    "twitter_tweets.user_id",
	TwitterID: "twitter_tweets.twitter_id",
	FullText:  "twitter_tweets.full_text",
	TweetAt:   "twitter_tweets.tweet_at",
	Raw:       "twitter_tweets.raw",
	CreatedAt: "twitter_tweets.created_at",
}

// Generated where

var TwitterTweetWhere = struct {
	ID        whereHelperint64
	UserID    whereHelperint64
	TwitterID whereHelperstring
	FullText  whereHelperstring
	TweetAt   whereHelpertime_Time
	Raw       whereHelpernull_JSON
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"twitter_tweets\".\"id\""},
	UserID:    whereHelperint64{field: "\"twitter_tweets\".\"user_id\""},
	TwitterID: whereHelperstring{field: "\"twitter_tweets\".\"twitter_id\""},
	FullText:  whereHelperstring{field: "\"twitter_tweets\".\"full_text\""},
	TweetAt:   whereHelpertime_Time{field: "\"twitter_tweets\".\"tweet_at\""},
	Raw:       whereHelpernull_JSON{field: "\"twitter_tweets\".\"raw\""},
	CreatedAt: whereHelpertime_Time{field: "\"twitter_tweets\".\"created_at\""},
}

// TwitterTweetRels is where relationship names are stored.
var TwitterTweetRels = struct {
	User string
}{
	User: "User",
}

// twitterTweetR is where relationships are stored.
type twitterTweetR struct {
	User *TwitterUser `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*twitterTweetR) NewStruct() *twitterTweetR {
	return &twitterTweetR{}
}

// twitterTweetL is where Load methods for each relationship are stored.
type twitterTweetL struct{}

var (
	twitterTweetAllColumns            = []string{"id", "user_id", "twitter_id", "full_text", "tweet_at", "raw", "created_at"}
	twitterTweetColumnsWithoutDefault = []string{"user_id", "twitter_id", "full_text", "tweet_at"}
	twitterTweetColumnsWithDefault    = []string{"id", "raw", "created_at"}
	twitterTweetPrimaryKeyColumns     = []string{"id"}
	twitterTweetGeneratedColumns      = []string{}
)

type (
	// TwitterTweetSlice is an alias for a slice of pointers to TwitterTweet.
	// This should almost always be used instead of []TwitterTweet.
	TwitterTweetSlice []*TwitterTweet

	twitterTweetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	twitterTweetType                 = reflect.TypeOf(&TwitterTweet{})
	twitterTweetMapping              = queries.MakeStructMapping(twitterTweetType)
	twitterTweetPrimaryKeyMapping, _ = queries.BindMapping(twitterTweetType, twitterTweetMapping, twitterTweetPrimaryKeyColumns)
	twitterTweetInsertCacheMut       sync.RWMutex
	twitterTweetInsertCache          = make(map[string]insertCache)
	twitterTweetUpdateCacheMut       sync.RWMutex
	twitterTweetUpdateCache          = make(map[string]updateCache)
	twitterTweetUpsertCacheMut       sync.RWMutex
	twitterTweetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single twitterTweet record from the query.
func (q twitterTweetQuery) One(exec boil.Executor) (*TwitterTweet, error) {
	o := &TwitterTweet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for twitter_tweets")
	}

	return o, nil
}

// All returns all TwitterTweet records from the query.
func (q twitterTweetQuery) All(exec boil.Executor) (TwitterTweetSlice, error) {
	var o []*TwitterTweet

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to TwitterTweet slice")
	}

	return o, nil
}

// Count returns the count of all TwitterTweet records in the query.
func (q twitterTweetQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count twitter_tweets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q twitterTweetQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if twitter_tweets exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *TwitterTweet) User(mods ...qm.QueryMod) twitterUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := TwitterUsers(queryMods...)
	queries.SetFrom(query.Query, "\"twitter_users\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (twitterTweetL) LoadUser(e boil.Executor, singular bool, maybeTwitterTweet interface{}, mods queries.Applicator) error {
	var slice []*TwitterTweet
	var object *TwitterTweet

	if singular {
		object = maybeTwitterTweet.(*TwitterTweet)
	} else {
		slice = *maybeTwitterTweet.(*[]*TwitterTweet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &twitterTweetR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &twitterTweetR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`twitter_users`),
		qm.WhereIn(`twitter_users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TwitterUser")
	}

	var resultSlice []*TwitterUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TwitterUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for twitter_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for twitter_users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &twitterUserR{}
		}
		foreign.R.UserTwitterTweets = append(foreign.R.UserTwitterTweets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &twitterUserR{}
				}
				foreign.R.UserTwitterTweets = append(foreign.R.UserTwitterTweets, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the twitterTweet to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTwitterTweets.
func (o *TwitterTweet) SetUser(exec boil.Executor, insert bool, related *TwitterUser) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"twitter_tweets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, twitterTweetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &twitterTweetR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &twitterUserR{
			UserTwitterTweets: TwitterTweetSlice{o},
		}
	} else {
		related.R.UserTwitterTweets = append(related.R.UserTwitterTweets, o)
	}

	return nil
}

// TwitterTweets retrieves all the records using an executor.
func TwitterTweets(mods ...qm.QueryMod) twitterTweetQuery {
	mods = append(mods, qm.From("\"twitter_tweets\""))
	return twitterTweetQuery{NewQuery(mods...)}
}

// FindTwitterTweet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTwitterTweet(exec boil.Executor, iD int64, selectCols ...string) (*TwitterTweet, error) {
	twitterTweetObj := &TwitterTweet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"twitter_tweets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, twitterTweetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from twitter_tweets")
	}

	return twitterTweetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TwitterTweet) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no twitter_tweets provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(twitterTweetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	twitterTweetInsertCacheMut.RLock()
	cache, cached := twitterTweetInsertCache[key]
	twitterTweetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			twitterTweetAllColumns,
			twitterTweetColumnsWithDefault,
			twitterTweetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(twitterTweetType, twitterTweetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(twitterTweetType, twitterTweetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"twitter_tweets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"twitter_tweets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into twitter_tweets")
	}

	if !cached {
		twitterTweetInsertCacheMut.Lock()
		twitterTweetInsertCache[key] = cache
		twitterTweetInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TwitterTweet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TwitterTweet) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	twitterTweetUpdateCacheMut.RLock()
	cache, cached := twitterTweetUpdateCache[key]
	twitterTweetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			twitterTweetAllColumns,
			twitterTweetPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mdbmodels: unable to update twitter_tweets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"twitter_tweets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, twitterTweetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(twitterTweetType, twitterTweetMapping, append(wl, twitterTweetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update twitter_tweets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by update for twitter_tweets")
	}

	if !cached {
		twitterTweetUpdateCacheMut.Lock()
		twitterTweetUpdateCache[key] = cache
		twitterTweetUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q twitterTweetQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all for twitter_tweets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected for twitter_tweets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TwitterTweetSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), twitterTweetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"twitter_tweets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, twitterTweetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all in twitterTweet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected all in update all twitterTweet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TwitterTweet) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no twitter_tweets provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(twitterTweetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	twitterTweetUpsertCacheMut.RLock()
	cache, cached := twitterTweetUpsertCache[key]
	twitterTweetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			twitterTweetAllColumns,
			twitterTweetColumnsWithDefault,
			twitterTweetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			twitterTweetAllColumns,
			twitterTweetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert twitter_tweets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(twitterTweetPrimaryKeyColumns))
			copy(conflict, twitterTweetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"twitter_tweets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(twitterTweetType, twitterTweetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(twitterTweetType, twitterTweetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert twitter_tweets")
	}

	if !cached {
		twitterTweetUpsertCacheMut.Lock()
		twitterTweetUpsertCache[key] = cache
		twitterTweetUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TwitterTweet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TwitterTweet) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdbmodels: no TwitterTweet provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), twitterTweetPrimaryKeyMapping)
	sql := "DELETE FROM \"twitter_tweets\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete from twitter_tweets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by delete for twitter_tweets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q twitterTweetQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdbmodels: no twitterTweetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from twitter_tweets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for twitter_tweets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TwitterTweetSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), twitterTweetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"twitter_tweets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, twitterTweetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from twitterTweet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for twitter_tweets")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TwitterTweet) Reload(exec boil.Executor) error {
	ret, err := FindTwitterTweet(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TwitterTweetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TwitterTweetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), twitterTweetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"twitter_tweets\".* FROM \"twitter_tweets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, twitterTweetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in TwitterTweetSlice")
	}

	*o = slice

	return nil
}

// TwitterTweetExists checks if the TwitterTweet row exists.
func TwitterTweetExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"twitter_tweets\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if twitter_tweets exists")
	}

	return exists, nil
}
