// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testHistories(t *testing.T) {
	t.Parallel()

	query := Histories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Histories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := HistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if History exists: %s", err)
	}
	if !e {
		t.Errorf("Expected HistoryExists to return true, but got false.")
	}
}

func testHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	historyFound, err := FindHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if historyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Histories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Histories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	historyOne := &History{}
	historyTwo := &History{}
	if err = randomize.Struct(seed, historyOne, historyDBTypes, false, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}
	if err = randomize.Struct(seed, historyTwo, historyDBTypes, false, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = historyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = historyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Histories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	historyOne := &History{}
	historyTwo := &History{}
	if err = randomize.Struct(seed, historyOne, historyDBTypes, false, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}
	if err = randomize.Struct(seed, historyTwo, historyDBTypes, false, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = historyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = historyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func historyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func historyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *History) error {
	*o = History{}
	return nil
}

func testHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &History{}
	o := &History{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, historyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize History object: %s", err)
	}

	AddHistoryHook(boil.BeforeInsertHook, historyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	historyBeforeInsertHooks = []HistoryHook{}

	AddHistoryHook(boil.AfterInsertHook, historyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	historyAfterInsertHooks = []HistoryHook{}

	AddHistoryHook(boil.AfterSelectHook, historyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	historyAfterSelectHooks = []HistoryHook{}

	AddHistoryHook(boil.BeforeUpdateHook, historyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	historyBeforeUpdateHooks = []HistoryHook{}

	AddHistoryHook(boil.AfterUpdateHook, historyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	historyAfterUpdateHooks = []HistoryHook{}

	AddHistoryHook(boil.BeforeDeleteHook, historyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	historyBeforeDeleteHooks = []HistoryHook{}

	AddHistoryHook(boil.AfterDeleteHook, historyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	historyAfterDeleteHooks = []HistoryHook{}

	AddHistoryHook(boil.BeforeUpsertHook, historyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	historyBeforeUpsertHooks = []HistoryHook{}

	AddHistoryHook(boil.AfterUpsertHook, historyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	historyAfterUpsertHooks = []HistoryHook{}
}

func testHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(historyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := HistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Histories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	historyDBTypes = map[string]string{`ID`: `bigint`, `AccountID`: `character varying`, `UID`: `character varying`, `ContentUnitType`: `bigint`, `EventType`: `bigint`, `CreatedAt`: `timestamp with time zone`}
	_              = bytes.MinRead
)

func testHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(historyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(historyAllColumns) == len(historyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, historyDBTypes, true, historyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(historyAllColumns) == len(historyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &History{}
	if err = randomize.Struct(seed, o, historyDBTypes, true, historyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, historyDBTypes, true, historyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(historyAllColumns, historyPrimaryKeyColumns) {
		fields = historyAllColumns
	} else {
		fields = strmangle.SetComplement(
			historyAllColumns,
			historyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := HistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(historyAllColumns) == len(historyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := History{}
	if err = randomize.Struct(seed, &o, historyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert History: %s", err)
	}

	count, err := Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, historyDBTypes, false, historyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize History struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert History: %s", err)
	}

	count, err = Histories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
