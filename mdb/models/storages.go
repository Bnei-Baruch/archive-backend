// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Storage is an object representing the database table.
type Storage struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Country  string `boil:"country" json:"country" toml:"country" yaml:"country"`
	Location string `boil:"location" json:"location" toml:"location" yaml:"location"`
	Status   string `boil:"status" json:"status" toml:"status" yaml:"status"`
	Access   string `boil:"access" json:"access" toml:"access" yaml:"access"`

	R *storageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StorageColumns = struct {
	ID       string
	Name     string
	Country  string
	Location string
	Status   string
	Access   string
}{
	ID:       "id",
	Name:     "name",
	Country:  "country",
	Location: "location",
	Status:   "status",
	Access:   "access",
}

var StorageTableColumns = struct {
	ID       string
	Name     string
	Country  string
	Location string
	Status   string
	Access   string
}{
	ID:       "storages.id",
	Name:     "storages.name",
	Country:  "storages.country",
	Location: "storages.location",
	Status:   "storages.status",
	Access:   "storages.access",
}

// Generated where

var StorageWhere = struct {
	ID       whereHelperint64
	Name     whereHelperstring
	Country  whereHelperstring
	Location whereHelperstring
	Status   whereHelperstring
	Access   whereHelperstring
}{
	ID:       whereHelperint64{field: "\"storages\".\"id\""},
	Name:     whereHelperstring{field: "\"storages\".\"name\""},
	Country:  whereHelperstring{field: "\"storages\".\"country\""},
	Location: whereHelperstring{field: "\"storages\".\"location\""},
	Status:   whereHelperstring{field: "\"storages\".\"status\""},
	Access:   whereHelperstring{field: "\"storages\".\"access\""},
}

// StorageRels is where relationship names are stored.
var StorageRels = struct {
	Files string
}{
	Files: "Files",
}

// storageR is where relationships are stored.
type storageR struct {
	Files FileSlice `boil:"Files" json:"Files" toml:"Files" yaml:"Files"`
}

// NewStruct creates a new relationship struct
func (*storageR) NewStruct() *storageR {
	return &storageR{}
}

// storageL is where Load methods for each relationship are stored.
type storageL struct{}

var (
	storageAllColumns            = []string{"id", "name", "country", "location", "status", "access"}
	storageColumnsWithoutDefault = []string{"name", "country", "location", "status", "access"}
	storageColumnsWithDefault    = []string{"id"}
	storagePrimaryKeyColumns     = []string{"id"}
	storageGeneratedColumns      = []string{}
)

type (
	// StorageSlice is an alias for a slice of pointers to Storage.
	// This should almost always be used instead of []Storage.
	StorageSlice []*Storage

	storageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storageType                 = reflect.TypeOf(&Storage{})
	storageMapping              = queries.MakeStructMapping(storageType)
	storagePrimaryKeyMapping, _ = queries.BindMapping(storageType, storageMapping, storagePrimaryKeyColumns)
	storageInsertCacheMut       sync.RWMutex
	storageInsertCache          = make(map[string]insertCache)
	storageUpdateCacheMut       sync.RWMutex
	storageUpdateCache          = make(map[string]updateCache)
	storageUpsertCacheMut       sync.RWMutex
	storageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single storage record from the query.
func (q storageQuery) One(exec boil.Executor) (*Storage, error) {
	o := &Storage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for storages")
	}

	return o, nil
}

// All returns all Storage records from the query.
func (q storageQuery) All(exec boil.Executor) (StorageSlice, error) {
	var o []*Storage

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to Storage slice")
	}

	return o, nil
}

// Count returns the count of all Storage records in the query.
func (q storageQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count storages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storageQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if storages exists")
	}

	return count > 0, nil
}

// Files retrieves all the file's Files with an executor.
func (o *Storage) Files(mods ...qm.QueryMod) fileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"files_storages\" on \"files\".\"id\" = \"files_storages\".\"file_id\""),
		qm.Where("\"files_storages\".\"storage_id\"=?", o.ID),
	)

	query := Files(queryMods...)
	queries.SetFrom(query.Query, "\"files\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"files\".*"})
	}

	return query
}

// LoadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storageL) LoadFiles(e boil.Executor, singular bool, maybeStorage interface{}, mods queries.Applicator) error {
	var slice []*Storage
	var object *Storage

	if singular {
		object = maybeStorage.(*Storage)
	} else {
		slice = *maybeStorage.(*[]*Storage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storageR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"files\".id, \"files\".uid, \"files\".name, \"files\".size, \"files\".type, \"files\".sub_type, \"files\".mime_type, \"files\".sha1, \"files\".content_unit_id, \"files\".created_at, \"files\".language, \"files\".backup_count, \"files\".first_backup_time, \"files\".properties, \"files\".parent_id, \"files\".file_created_at, \"files\".secure, \"files\".published, \"files\".removed_at, \"a\".\"storage_id\""),
		qm.From("\"files\""),
		qm.InnerJoin("\"files_storages\" as \"a\" on \"files\".\"id\" = \"a\".\"file_id\""),
		qm.WhereIn("\"a\".\"storage_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load files")
	}

	var resultSlice []*File

	var localJoinCols []int64
	for results.Next() {
		one := new(File)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.UID, &one.Name, &one.Size, &one.Type, &one.SubType, &one.MimeType, &one.Sha1, &one.ContentUnitID, &one.CreatedAt, &one.Language, &one.BackupCount, &one.FirstBackupTime, &one.Properties, &one.ParentID, &one.FileCreatedAt, &one.Secure, &one.Published, &one.RemovedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for files")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice files")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for files")
	}

	if singular {
		object.R.Files = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fileR{}
			}
			foreign.R.Storages = append(foreign.R.Storages, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Files = append(local.R.Files, foreign)
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.Storages = append(foreign.R.Storages, local)
				break
			}
		}
	}

	return nil
}

// AddFiles adds the given related objects to the existing relationships
// of the storage, optionally inserting them as new records.
// Appends related to o.R.Files.
// Sets related.R.Storages appropriately.
func (o *Storage) AddFiles(exec boil.Executor, insert bool, related ...*File) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"files_storages\" (\"storage_id\", \"file_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &storageR{
			Files: related,
		}
	} else {
		o.R.Files = append(o.R.Files, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fileR{
				Storages: StorageSlice{o},
			}
		} else {
			rel.R.Storages = append(rel.R.Storages, o)
		}
	}
	return nil
}

// SetFiles removes all previously related items of the
// storage replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Storages's Files accordingly.
// Replaces o.R.Files with related.
// Sets related.R.Storages's Files accordingly.
func (o *Storage) SetFiles(exec boil.Executor, insert bool, related ...*File) error {
	query := "delete from \"files_storages\" where \"storage_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeFilesFromStoragesSlice(o, related)
	if o.R != nil {
		o.R.Files = nil
	}
	return o.AddFiles(exec, insert, related...)
}

// RemoveFiles relationships from objects passed in.
// Removes related items from R.Files (uses pointer comparison, removal does not keep order)
// Sets related.R.Storages.
func (o *Storage) RemoveFiles(exec boil.Executor, related ...*File) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"files_storages\" where \"storage_id\" = $1 and \"file_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeFilesFromStoragesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Files {
			if rel != ri {
				continue
			}

			ln := len(o.R.Files)
			if ln > 1 && i < ln-1 {
				o.R.Files[i] = o.R.Files[ln-1]
			}
			o.R.Files = o.R.Files[:ln-1]
			break
		}
	}

	return nil
}

func removeFilesFromStoragesSlice(o *Storage, related []*File) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Storages {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Storages)
			if ln > 1 && i < ln-1 {
				rel.R.Storages[i] = rel.R.Storages[ln-1]
			}
			rel.R.Storages = rel.R.Storages[:ln-1]
			break
		}
	}
}

// Storages retrieves all the records using an executor.
func Storages(mods ...qm.QueryMod) storageQuery {
	mods = append(mods, qm.From("\"storages\""))
	return storageQuery{NewQuery(mods...)}
}

// FindStorage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStorage(exec boil.Executor, iD int64, selectCols ...string) (*Storage, error) {
	storageObj := &Storage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"storages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, storageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from storages")
	}

	return storageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Storage) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no storages provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(storageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storageInsertCacheMut.RLock()
	cache, cached := storageInsertCache[key]
	storageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storageAllColumns,
			storageColumnsWithDefault,
			storageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storageType, storageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storageType, storageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"storages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"storages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into storages")
	}

	if !cached {
		storageInsertCacheMut.Lock()
		storageInsertCache[key] = cache
		storageInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Storage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Storage) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	storageUpdateCacheMut.RLock()
	cache, cached := storageUpdateCache[key]
	storageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storageAllColumns,
			storagePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mdbmodels: unable to update storages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"storages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storageType, storageMapping, append(wl, storagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update storages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by update for storages")
	}

	if !cached {
		storageUpdateCacheMut.Lock()
		storageUpdateCache[key] = cache
		storageUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q storageQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all for storages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected for storages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StorageSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"storages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all in storage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected all in update all storage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Storage) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no storages provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(storageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storageUpsertCacheMut.RLock()
	cache, cached := storageUpsertCache[key]
	storageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storageAllColumns,
			storageColumnsWithDefault,
			storageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storageAllColumns,
			storagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert storages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storagePrimaryKeyColumns))
			copy(conflict, storagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"storages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storageType, storageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storageType, storageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert storages")
	}

	if !cached {
		storageUpsertCacheMut.Lock()
		storageUpsertCache[key] = cache
		storageUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Storage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Storage) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdbmodels: no Storage provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storagePrimaryKeyMapping)
	sql := "DELETE FROM \"storages\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete from storages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by delete for storages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storageQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdbmodels: no storageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from storages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for storages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StorageSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"storages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from storage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for storages")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Storage) Reload(exec boil.Executor) error {
	ret, err := FindStorage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StorageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"storages\".* FROM \"storages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in StorageSlice")
	}

	*o = slice

	return nil
}

// StorageExists checks if the Storage row exists.
func StorageExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"storages\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if storages exists")
	}

	return exists, nil
}
