// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlogPost is an object representing the database table.
type BlogPost struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlogID    int64     `boil:"blog_id" json:"blog_id" toml:"blog_id" yaml:"blog_id"`
	WPID      int64     `boil:"wp_id" json:"wp_id" toml:"wp_id" yaml:"wp_id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content   string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	PostedAt  time.Time `boil:"posted_at" json:"posted_at" toml:"posted_at" yaml:"posted_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Link      string    `boil:"link" json:"link" toml:"link" yaml:"link"`
	Filtered  bool      `boil:"filtered" json:"filtered" toml:"filtered" yaml:"filtered"`

	R *blogPostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blogPostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlogPostColumns = struct {
	ID        string
	BlogID    string
	WPID      string
	Title     string
	Content   string
	PostedAt  string
	CreatedAt string
	Link      string
	Filtered  string
}{
	ID:        "id",
	BlogID:    "blog_id",
	WPID:      "wp_id",
	Title:     "title",
	Content:   "content",
	PostedAt:  "posted_at",
	CreatedAt: "created_at",
	Link:      "link",
	Filtered:  "filtered",
}

var BlogPostTableColumns = struct {
	ID        string
	BlogID    string
	WPID      string
	Title     string
	Content   string
	PostedAt  string
	CreatedAt string
	Link      string
	Filtered  string
}{
	ID:        "blog_posts.id",
	BlogID:    "blog_posts.blog_id",
	WPID:      "blog_posts.wp_id",
	Title:     "blog_posts.title",
	Content:   "blog_posts.content",
	PostedAt:  "blog_posts.posted_at",
	CreatedAt: "blog_posts.created_at",
	Link:      "blog_posts.link",
	Filtered:  "blog_posts.filtered",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var BlogPostWhere = struct {
	ID        whereHelperint64
	BlogID    whereHelperint64
	WPID      whereHelperint64
	Title     whereHelperstring
	Content   whereHelperstring
	PostedAt  whereHelpertime_Time
	CreatedAt whereHelpertime_Time
	Link      whereHelperstring
	Filtered  whereHelperbool
}{
	ID:        whereHelperint64{field: "\"blog_posts\".\"id\""},
	BlogID:    whereHelperint64{field: "\"blog_posts\".\"blog_id\""},
	WPID:      whereHelperint64{field: "\"blog_posts\".\"wp_id\""},
	Title:     whereHelperstring{field: "\"blog_posts\".\"title\""},
	Content:   whereHelperstring{field: "\"blog_posts\".\"content\""},
	PostedAt:  whereHelpertime_Time{field: "\"blog_posts\".\"posted_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"blog_posts\".\"created_at\""},
	Link:      whereHelperstring{field: "\"blog_posts\".\"link\""},
	Filtered:  whereHelperbool{field: "\"blog_posts\".\"filtered\""},
}

// BlogPostRels is where relationship names are stored.
var BlogPostRels = struct {
	Blog string
}{
	Blog: "Blog",
}

// blogPostR is where relationships are stored.
type blogPostR struct {
	Blog *Blog `boil:"Blog" json:"Blog" toml:"Blog" yaml:"Blog"`
}

// NewStruct creates a new relationship struct
func (*blogPostR) NewStruct() *blogPostR {
	return &blogPostR{}
}

// blogPostL is where Load methods for each relationship are stored.
type blogPostL struct{}

var (
	blogPostAllColumns            = []string{"id", "blog_id", "wp_id", "title", "content", "posted_at", "created_at", "link", "filtered"}
	blogPostColumnsWithoutDefault = []string{"blog_id", "wp_id", "title", "content", "posted_at"}
	blogPostColumnsWithDefault    = []string{"id", "created_at", "link", "filtered"}
	blogPostPrimaryKeyColumns     = []string{"id"}
	blogPostGeneratedColumns      = []string{}
)

type (
	// BlogPostSlice is an alias for a slice of pointers to BlogPost.
	// This should almost always be used instead of []BlogPost.
	BlogPostSlice []*BlogPost

	blogPostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blogPostType                 = reflect.TypeOf(&BlogPost{})
	blogPostMapping              = queries.MakeStructMapping(blogPostType)
	blogPostPrimaryKeyMapping, _ = queries.BindMapping(blogPostType, blogPostMapping, blogPostPrimaryKeyColumns)
	blogPostInsertCacheMut       sync.RWMutex
	blogPostInsertCache          = make(map[string]insertCache)
	blogPostUpdateCacheMut       sync.RWMutex
	blogPostUpdateCache          = make(map[string]updateCache)
	blogPostUpsertCacheMut       sync.RWMutex
	blogPostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single blogPost record from the query.
func (q blogPostQuery) One(exec boil.Executor) (*BlogPost, error) {
	o := &BlogPost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for blog_posts")
	}

	return o, nil
}

// All returns all BlogPost records from the query.
func (q blogPostQuery) All(exec boil.Executor) (BlogPostSlice, error) {
	var o []*BlogPost

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to BlogPost slice")
	}

	return o, nil
}

// Count returns the count of all BlogPost records in the query.
func (q blogPostQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count blog_posts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blogPostQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if blog_posts exists")
	}

	return count > 0, nil
}

// Blog pointed to by the foreign key.
func (o *BlogPost) Blog(mods ...qm.QueryMod) blogQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlogID),
	}

	queryMods = append(queryMods, mods...)

	query := Blogs(queryMods...)
	queries.SetFrom(query.Query, "\"blogs\"")

	return query
}

// LoadBlog allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blogPostL) LoadBlog(e boil.Executor, singular bool, maybeBlogPost interface{}, mods queries.Applicator) error {
	var slice []*BlogPost
	var object *BlogPost

	if singular {
		object = maybeBlogPost.(*BlogPost)
	} else {
		slice = *maybeBlogPost.(*[]*BlogPost)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blogPostR{}
		}
		args = append(args, object.BlogID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blogPostR{}
			}

			for _, a := range args {
				if a == obj.BlogID {
					continue Outer
				}
			}

			args = append(args, obj.BlogID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blogs`),
		qm.WhereIn(`blogs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blog")
	}

	var resultSlice []*Blog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blogs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blogs")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blog = foreign
		if foreign.R == nil {
			foreign.R = &blogR{}
		}
		foreign.R.BlogPosts = append(foreign.R.BlogPosts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlogID == foreign.ID {
				local.R.Blog = foreign
				if foreign.R == nil {
					foreign.R = &blogR{}
				}
				foreign.R.BlogPosts = append(foreign.R.BlogPosts, local)
				break
			}
		}
	}

	return nil
}

// SetBlog of the blogPost to the related item.
// Sets o.R.Blog to related.
// Adds o to related.R.BlogPosts.
func (o *BlogPost) SetBlog(exec boil.Executor, insert bool, related *Blog) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blog_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blog_id"}),
		strmangle.WhereClause("\"", "\"", 2, blogPostPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlogID = related.ID
	if o.R == nil {
		o.R = &blogPostR{
			Blog: related,
		}
	} else {
		o.R.Blog = related
	}

	if related.R == nil {
		related.R = &blogR{
			BlogPosts: BlogPostSlice{o},
		}
	} else {
		related.R.BlogPosts = append(related.R.BlogPosts, o)
	}

	return nil
}

// BlogPosts retrieves all the records using an executor.
func BlogPosts(mods ...qm.QueryMod) blogPostQuery {
	mods = append(mods, qm.From("\"blog_posts\""))
	return blogPostQuery{NewQuery(mods...)}
}

// FindBlogPost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlogPost(exec boil.Executor, iD int64, selectCols ...string) (*BlogPost, error) {
	blogPostObj := &BlogPost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blog_posts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blogPostObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from blog_posts")
	}

	return blogPostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlogPost) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no blog_posts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(blogPostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blogPostInsertCacheMut.RLock()
	cache, cached := blogPostInsertCache[key]
	blogPostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blogPostAllColumns,
			blogPostColumnsWithDefault,
			blogPostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blogPostType, blogPostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blog_posts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blog_posts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into blog_posts")
	}

	if !cached {
		blogPostInsertCacheMut.Lock()
		blogPostInsertCache[key] = cache
		blogPostInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BlogPost.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlogPost) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	blogPostUpdateCacheMut.RLock()
	cache, cached := blogPostUpdateCache[key]
	blogPostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blogPostAllColumns,
			blogPostPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mdbmodels: unable to update blog_posts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blog_posts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blogPostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, append(wl, blogPostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update blog_posts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by update for blog_posts")
	}

	if !cached {
		blogPostUpdateCacheMut.Lock()
		blogPostUpdateCache[key] = cache
		blogPostUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q blogPostQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all for blog_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected for blog_posts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlogPostSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blog_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blogPostPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all in blogPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected all in update all blogPost")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlogPost) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no blog_posts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(blogPostColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blogPostUpsertCacheMut.RLock()
	cache, cached := blogPostUpsertCache[key]
	blogPostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blogPostAllColumns,
			blogPostColumnsWithDefault,
			blogPostColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blogPostAllColumns,
			blogPostPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert blog_posts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blogPostPrimaryKeyColumns))
			copy(conflict, blogPostPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blog_posts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blogPostType, blogPostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert blog_posts")
	}

	if !cached {
		blogPostUpsertCacheMut.Lock()
		blogPostUpsertCache[key] = cache
		blogPostUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BlogPost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlogPost) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdbmodels: no BlogPost provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blogPostPrimaryKeyMapping)
	sql := "DELETE FROM \"blog_posts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete from blog_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by delete for blog_posts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blogPostQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdbmodels: no blogPostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from blog_posts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for blog_posts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlogPostSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blog_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blogPostPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from blogPost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for blog_posts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlogPost) Reload(exec boil.Executor) error {
	ret, err := FindBlogPost(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlogPostSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlogPostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blog_posts\".* FROM \"blog_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blogPostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in BlogPostSlice")
	}

	*o = slice

	return nil
}

// BlogPostExists checks if the BlogPost row exists.
func BlogPostExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blog_posts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if blog_posts exists")
	}

	return exists, nil
}
