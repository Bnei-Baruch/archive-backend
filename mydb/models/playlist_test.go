// Code generated by SQLBoiler (https://github.com/Bnei-Baruch/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/Bnei-Baruch/sqlboiler/boil"
	"github.com/Bnei-Baruch/sqlboiler/randomize"
	"github.com/Bnei-Baruch/sqlboiler/strmangle"
)

func testPlaylists(t *testing.T) {
	t.Parallel()

	query := Playlists(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPlaylistsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = playlist.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Playlists(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlaylistSlice{playlist}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPlaylistsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PlaylistExists(tx, playlist.ID)
	if err != nil {
		t.Errorf("Unable to check if Playlist exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlaylistExistsG to return true, but got false.")
	}
}
func testPlaylistsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	playlistFound, err := FindPlaylist(tx, playlist.ID)
	if err != nil {
		t.Error(err)
	}

	if playlistFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPlaylistsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Playlists(tx).Bind(playlist); err != nil {
		t.Error(err)
	}
}

func testPlaylistsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Playlists(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlaylistsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistOne := &Playlist{}
	playlistTwo := &Playlist{}
	if err = randomize.Struct(seed, playlistOne, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistTwo, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playlistTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Playlists(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlaylistsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playlistOne := &Playlist{}
	playlistTwo := &Playlist{}
	if err = randomize.Struct(seed, playlistOne, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistTwo, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playlistTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPlaylistsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx, playlistColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistToManyPlaylistItems(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Playlist
	var b, c PlaylistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, playlistItemDBTypes, false, playlistItemColumnsWithDefault...)
	randomize.Struct(seed, &c, playlistItemDBTypes, false, playlistItemColumnsWithDefault...)

	b.PlaylistID = a.ID
	c.PlaylistID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	playlistItem, err := a.PlaylistItems(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range playlistItem {
		if v.PlaylistID == b.PlaylistID {
			bFound = true
		}
		if v.PlaylistID == c.PlaylistID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlaylistSlice{&a}
	if err = a.L.LoadPlaylistItems(tx, false, (*[]*Playlist)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlaylistItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlaylistItems = nil
	if err = a.L.LoadPlaylistItems(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlaylistItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", playlistItem)
	}
}

func testPlaylistToManyAddOpPlaylistItems(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Playlist
	var b, c, d, e PlaylistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlaylistItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playlistItemDBTypes, false, strmangle.SetComplement(playlistItemPrimaryKeyColumns, playlistItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlaylistItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlaylistItems(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlaylistID {
			t.Error("foreign key was wrong value", a.ID, first.PlaylistID)
		}
		if a.ID != second.PlaylistID {
			t.Error("foreign key was wrong value", a.ID, second.PlaylistID)
		}

		if first.R.Playlist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Playlist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlaylistItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlaylistItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlaylistItems(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlaylistsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = playlist.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlaylistSlice{playlist}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPlaylistsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Playlists(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playlistDBTypes = map[string]string{`AccountID`: `character varying`, `CreatedAt`: `timestamp with time zone`, `ID`: `bigint`, `LastPlayed`: `character varying`, `Name`: `character`, `Parameters`: `jsonb`, `Public`: `boolean`}
	_               = bytes.MinRead
)

func testPlaylistsUpdate(t *testing.T) {
	t.Parallel()

	if len(playlistColumns) == len(playlistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err = playlist.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playlistColumns) == len(playlistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	playlist := &Playlist{}
	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, playlist, playlistDBTypes, true, playlistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playlistColumns, playlistPrimaryKeyColumns) {
		fields = playlistColumns
	} else {
		fields = strmangle.SetComplement(
			playlistColumns,
			playlistPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(playlist))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PlaylistSlice{playlist}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPlaylistsUpsert(t *testing.T) {
	t.Parallel()

	if len(playlistColumns) == len(playlistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	playlist := Playlist{}
	if err = randomize.Struct(seed, &playlist, playlistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlist.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Playlist: %s", err)
	}

	count, err := Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &playlist, playlistDBTypes, false, playlistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err = playlist.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Playlist: %s", err)
	}

	count, err = Playlists(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
