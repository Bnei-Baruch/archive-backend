// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CollectionsContentUnit is an object representing the database table.
type CollectionsContentUnit struct {
	CollectionID  int64  `boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	ContentUnitID int64  `boil:"content_unit_id" json:"content_unit_id" toml:"content_unit_id" yaml:"content_unit_id"`
	Name          string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Position      int    `boil:"position" json:"position" toml:"position" yaml:"position"`

	R *collectionsContentUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collectionsContentUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollectionsContentUnitColumns = struct {
	CollectionID  string
	ContentUnitID string
	Name          string
	Position      string
}{
	CollectionID:  "collection_id",
	ContentUnitID: "content_unit_id",
	Name:          "name",
	Position:      "position",
}

var CollectionsContentUnitTableColumns = struct {
	CollectionID  string
	ContentUnitID string
	Name          string
	Position      string
}{
	CollectionID:  "collections_content_units.collection_id",
	ContentUnitID: "collections_content_units.content_unit_id",
	Name:          "collections_content_units.name",
	Position:      "collections_content_units.position",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CollectionsContentUnitWhere = struct {
	CollectionID  whereHelperint64
	ContentUnitID whereHelperint64
	Name          whereHelperstring
	Position      whereHelperint
}{
	CollectionID:  whereHelperint64{field: "\"collections_content_units\".\"collection_id\""},
	ContentUnitID: whereHelperint64{field: "\"collections_content_units\".\"content_unit_id\""},
	Name:          whereHelperstring{field: "\"collections_content_units\".\"name\""},
	Position:      whereHelperint{field: "\"collections_content_units\".\"position\""},
}

// CollectionsContentUnitRels is where relationship names are stored.
var CollectionsContentUnitRels = struct {
	Collection  string
	ContentUnit string
}{
	Collection:  "Collection",
	ContentUnit: "ContentUnit",
}

// collectionsContentUnitR is where relationships are stored.
type collectionsContentUnitR struct {
	Collection  *Collection  `boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	ContentUnit *ContentUnit `boil:"ContentUnit" json:"ContentUnit" toml:"ContentUnit" yaml:"ContentUnit"`
}

// NewStruct creates a new relationship struct
func (*collectionsContentUnitR) NewStruct() *collectionsContentUnitR {
	return &collectionsContentUnitR{}
}

// collectionsContentUnitL is where Load methods for each relationship are stored.
type collectionsContentUnitL struct{}

var (
	collectionsContentUnitAllColumns            = []string{"collection_id", "content_unit_id", "name", "position"}
	collectionsContentUnitColumnsWithoutDefault = []string{"collection_id", "content_unit_id", "name"}
	collectionsContentUnitColumnsWithDefault    = []string{"position"}
	collectionsContentUnitPrimaryKeyColumns     = []string{"collection_id", "content_unit_id"}
	collectionsContentUnitGeneratedColumns      = []string{}
)

type (
	// CollectionsContentUnitSlice is an alias for a slice of pointers to CollectionsContentUnit.
	// This should almost always be used instead of []CollectionsContentUnit.
	CollectionsContentUnitSlice []*CollectionsContentUnit

	collectionsContentUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collectionsContentUnitType                 = reflect.TypeOf(&CollectionsContentUnit{})
	collectionsContentUnitMapping              = queries.MakeStructMapping(collectionsContentUnitType)
	collectionsContentUnitPrimaryKeyMapping, _ = queries.BindMapping(collectionsContentUnitType, collectionsContentUnitMapping, collectionsContentUnitPrimaryKeyColumns)
	collectionsContentUnitInsertCacheMut       sync.RWMutex
	collectionsContentUnitInsertCache          = make(map[string]insertCache)
	collectionsContentUnitUpdateCacheMut       sync.RWMutex
	collectionsContentUnitUpdateCache          = make(map[string]updateCache)
	collectionsContentUnitUpsertCacheMut       sync.RWMutex
	collectionsContentUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single collectionsContentUnit record from the query.
func (q collectionsContentUnitQuery) One(exec boil.Executor) (*CollectionsContentUnit, error) {
	o := &CollectionsContentUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for collections_content_units")
	}

	return o, nil
}

// All returns all CollectionsContentUnit records from the query.
func (q collectionsContentUnitQuery) All(exec boil.Executor) (CollectionsContentUnitSlice, error) {
	var o []*CollectionsContentUnit

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to CollectionsContentUnit slice")
	}

	return o, nil
}

// Count returns the count of all CollectionsContentUnit records in the query.
func (q collectionsContentUnitQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count collections_content_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collectionsContentUnitQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if collections_content_units exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *CollectionsContentUnit) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collections\"")

	return query
}

// ContentUnit pointed to by the foreign key.
func (o *CollectionsContentUnit) ContentUnit(mods ...qm.QueryMod) contentUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentUnitID),
	}

	queryMods = append(queryMods, mods...)

	query := ContentUnits(queryMods...)
	queries.SetFrom(query.Query, "\"content_units\"")

	return query
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionsContentUnitL) LoadCollection(e boil.Executor, singular bool, maybeCollectionsContentUnit interface{}, mods queries.Applicator) error {
	var slice []*CollectionsContentUnit
	var object *CollectionsContentUnit

	if singular {
		object = maybeCollectionsContentUnit.(*CollectionsContentUnit)
	} else {
		slice = *maybeCollectionsContentUnit.(*[]*CollectionsContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionsContentUnitR{}
		}
		args = append(args, object.CollectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionsContentUnitR{}
			}

			for _, a := range args {
				if a == obj.CollectionID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.CollectionsContentUnits = append(foreign.R.CollectionsContentUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.CollectionsContentUnits = append(foreign.R.CollectionsContentUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadContentUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionsContentUnitL) LoadContentUnit(e boil.Executor, singular bool, maybeCollectionsContentUnit interface{}, mods queries.Applicator) error {
	var slice []*CollectionsContentUnit
	var object *CollectionsContentUnit

	if singular {
		object = maybeCollectionsContentUnit.(*CollectionsContentUnit)
	} else {
		slice = *maybeCollectionsContentUnit.(*[]*CollectionsContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionsContentUnitR{}
		}
		args = append(args, object.ContentUnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionsContentUnitR{}
			}

			for _, a := range args {
				if a == obj.ContentUnitID {
					continue Outer
				}
			}

			args = append(args, obj.ContentUnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_units`),
		qm.WhereIn(`content_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentUnit")
	}

	var resultSlice []*ContentUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_units")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentUnit = foreign
		if foreign.R == nil {
			foreign.R = &contentUnitR{}
		}
		foreign.R.CollectionsContentUnits = append(foreign.R.CollectionsContentUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentUnitID == foreign.ID {
				local.R.ContentUnit = foreign
				if foreign.R == nil {
					foreign.R = &contentUnitR{}
				}
				foreign.R.CollectionsContentUnits = append(foreign.R.CollectionsContentUnits, local)
				break
			}
		}
	}

	return nil
}

// SetCollection of the collectionsContentUnit to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.CollectionsContentUnits.
func (o *CollectionsContentUnit) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collections_content_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, collectionsContentUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CollectionID, o.ContentUnitID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &collectionsContentUnitR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			CollectionsContentUnits: CollectionsContentUnitSlice{o},
		}
	} else {
		related.R.CollectionsContentUnits = append(related.R.CollectionsContentUnits, o)
	}

	return nil
}

// SetContentUnit of the collectionsContentUnit to the related item.
// Sets o.R.ContentUnit to related.
// Adds o to related.R.CollectionsContentUnits.
func (o *CollectionsContentUnit) SetContentUnit(exec boil.Executor, insert bool, related *ContentUnit) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collections_content_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, collectionsContentUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.CollectionID, o.ContentUnitID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentUnitID = related.ID
	if o.R == nil {
		o.R = &collectionsContentUnitR{
			ContentUnit: related,
		}
	} else {
		o.R.ContentUnit = related
	}

	if related.R == nil {
		related.R = &contentUnitR{
			CollectionsContentUnits: CollectionsContentUnitSlice{o},
		}
	} else {
		related.R.CollectionsContentUnits = append(related.R.CollectionsContentUnits, o)
	}

	return nil
}

// CollectionsContentUnits retrieves all the records using an executor.
func CollectionsContentUnits(mods ...qm.QueryMod) collectionsContentUnitQuery {
	mods = append(mods, qm.From("\"collections_content_units\""))
	return collectionsContentUnitQuery{NewQuery(mods...)}
}

// FindCollectionsContentUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollectionsContentUnit(exec boil.Executor, collectionID int64, contentUnitID int64, selectCols ...string) (*CollectionsContentUnit, error) {
	collectionsContentUnitObj := &CollectionsContentUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"collections_content_units\" where \"collection_id\"=$1 AND \"content_unit_id\"=$2", sel,
	)

	q := queries.Raw(query, collectionID, contentUnitID)

	err := q.Bind(nil, exec, collectionsContentUnitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from collections_content_units")
	}

	return collectionsContentUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CollectionsContentUnit) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no collections_content_units provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(collectionsContentUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collectionsContentUnitInsertCacheMut.RLock()
	cache, cached := collectionsContentUnitInsertCache[key]
	collectionsContentUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collectionsContentUnitAllColumns,
			collectionsContentUnitColumnsWithDefault,
			collectionsContentUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collectionsContentUnitType, collectionsContentUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collectionsContentUnitType, collectionsContentUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"collections_content_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"collections_content_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into collections_content_units")
	}

	if !cached {
		collectionsContentUnitInsertCacheMut.Lock()
		collectionsContentUnitInsertCache[key] = cache
		collectionsContentUnitInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CollectionsContentUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CollectionsContentUnit) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	collectionsContentUnitUpdateCacheMut.RLock()
	cache, cached := collectionsContentUnitUpdateCache[key]
	collectionsContentUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collectionsContentUnitAllColumns,
			collectionsContentUnitPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mdbmodels: unable to update collections_content_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"collections_content_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, collectionsContentUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collectionsContentUnitType, collectionsContentUnitMapping, append(wl, collectionsContentUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update collections_content_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by update for collections_content_units")
	}

	if !cached {
		collectionsContentUnitUpdateCacheMut.Lock()
		collectionsContentUnitUpdateCache[key] = cache
		collectionsContentUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q collectionsContentUnitQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all for collections_content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected for collections_content_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollectionsContentUnitSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionsContentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"collections_content_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, collectionsContentUnitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all in collectionsContentUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected all in update all collectionsContentUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CollectionsContentUnit) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no collections_content_units provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(collectionsContentUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collectionsContentUnitUpsertCacheMut.RLock()
	cache, cached := collectionsContentUnitUpsertCache[key]
	collectionsContentUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			collectionsContentUnitAllColumns,
			collectionsContentUnitColumnsWithDefault,
			collectionsContentUnitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			collectionsContentUnitAllColumns,
			collectionsContentUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert collections_content_units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(collectionsContentUnitPrimaryKeyColumns))
			copy(conflict, collectionsContentUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"collections_content_units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(collectionsContentUnitType, collectionsContentUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collectionsContentUnitType, collectionsContentUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert collections_content_units")
	}

	if !cached {
		collectionsContentUnitUpsertCacheMut.Lock()
		collectionsContentUnitUpsertCache[key] = cache
		collectionsContentUnitUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CollectionsContentUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CollectionsContentUnit) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdbmodels: no CollectionsContentUnit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collectionsContentUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"collections_content_units\" WHERE \"collection_id\"=$1 AND \"content_unit_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete from collections_content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by delete for collections_content_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collectionsContentUnitQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdbmodels: no collectionsContentUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from collections_content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for collections_content_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollectionsContentUnitSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionsContentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"collections_content_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionsContentUnitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from collectionsContentUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for collections_content_units")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CollectionsContentUnit) Reload(exec boil.Executor) error {
	ret, err := FindCollectionsContentUnit(exec, o.CollectionID, o.ContentUnitID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollectionsContentUnitSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollectionsContentUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionsContentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"collections_content_units\".* FROM \"collections_content_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionsContentUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in CollectionsContentUnitSlice")
	}

	*o = slice

	return nil
}

// CollectionsContentUnitExists checks if the CollectionsContentUnit row exists.
func CollectionsContentUnitExists(exec boil.Executor, collectionID int64, contentUnitID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"collections_content_units\" where \"collection_id\"=$1 AND \"content_unit_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, collectionID, contentUnitID)
	}
	row := exec.QueryRow(sql, collectionID, contentUnitID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if collections_content_units exists")
	}

	return exists, nil
}
