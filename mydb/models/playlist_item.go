// Code generated by SQLBoiler (https://github.com/Bnei-Baruch/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/Bnei-Baruch/sqlboiler/boil"
	"github.com/Bnei-Baruch/sqlboiler/queries"
	"github.com/Bnei-Baruch/sqlboiler/queries/qm"
	"github.com/Bnei-Baruch/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/volatiletech/null.v6"
)

// PlaylistItem is an object representing the database table.
type PlaylistItem struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlaylistID     int64     `boil:"playlist_id" json:"playlist_id" toml:"playlist_id" yaml:"playlist_id"`
	Position       null.Int  `boil:"position" json:"position,omitempty" toml:"position" yaml:"position,omitempty"`
	ContentUnitUID string    `boil:"content_unit_uid" json:"content_unit_uid" toml:"content_unit_uid" yaml:"content_unit_uid"`
	AddedAt        time.Time `boil:"added_at" json:"added_at" toml:"added_at" yaml:"added_at"`

	R *playlistItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playlistItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaylistItemColumns = struct {
	ID             string
	PlaylistID     string
	Position       string
	ContentUnitUID string
	AddedAt        string
}{
	ID:             "id",
	PlaylistID:     "playlist_id",
	Position:       "position",
	ContentUnitUID: "content_unit_uid",
	AddedAt:        "added_at",
}

// playlistItemR is where relationships are stored.
type playlistItemR struct {
	Playlist *Playlist
}

// playlistItemL is where Load methods for each relationship are stored.
type playlistItemL struct{}

var (
	playlistItemColumns               = []string{"id", "playlist_id", "position", "content_unit_uid", "added_at"}
	playlistItemColumnsWithoutDefault = []string{"playlist_id", "position", "content_unit_uid"}
	playlistItemColumnsWithDefault    = []string{"id", "added_at"}
	playlistItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlaylistItemSlice is an alias for a slice of pointers to PlaylistItem.
	// This should generally be used opposed to []PlaylistItem.
	PlaylistItemSlice []*PlaylistItem

	playlistItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playlistItemType                 = reflect.TypeOf(&PlaylistItem{})
	playlistItemMapping              = queries.MakeStructMapping(playlistItemType)
	playlistItemPrimaryKeyMapping, _ = queries.BindMapping(playlistItemType, playlistItemMapping, playlistItemPrimaryKeyColumns)
	playlistItemInsertCacheMut       sync.RWMutex
	playlistItemInsertCache          = make(map[string]insertCache)
	playlistItemUpdateCacheMut       sync.RWMutex
	playlistItemUpdateCache          = make(map[string]updateCache)
	playlistItemUpsertCacheMut       sync.RWMutex
	playlistItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single playlistItem record from the query, and panics on error.
func (q playlistItemQuery) OneP() *PlaylistItem {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single playlistItem record from the query.
func (q playlistItemQuery) One() (*PlaylistItem, error) {
	o := &PlaylistItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for playlist_item")
	}

	return o, nil
}

// AllP returns all PlaylistItem records from the query, and panics on error.
func (q playlistItemQuery) AllP() PlaylistItemSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all PlaylistItem records from the query.
func (q playlistItemQuery) All() (PlaylistItemSlice, error) {
	var o []*PlaylistItem

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PlaylistItem slice")
	}

	return o, nil
}

// CountP returns the count of all PlaylistItem records in the query, and panics on error.
func (q playlistItemQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all PlaylistItem records in the query.
func (q playlistItemQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count playlist_item rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q playlistItemQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q playlistItemQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if playlist_item exists")
	}

	return count > 0, nil
}

// PlaylistG pointed to by the foreign key.
func (o *PlaylistItem) PlaylistG(mods ...qm.QueryMod) playlistQuery {
	return o.Playlist(boil.GetDB(), mods...)
}

// Playlist pointed to by the foreign key.
func (o *PlaylistItem) Playlist(exec boil.Executor, mods ...qm.QueryMod) playlistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PlaylistID),
	}

	queryMods = append(queryMods, mods...)

	query := Playlists(exec, queryMods...)
	queries.SetFrom(query.Query, "\"playlist\"")

	return query
} // LoadPlaylist allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (playlistItemL) LoadPlaylist(e boil.Executor, singular bool, maybePlaylistItem interface{}) error {
	var slice []*PlaylistItem
	var object *PlaylistItem

	count := 1
	if singular {
		object = maybePlaylistItem.(*PlaylistItem)
	} else {
		slice = *maybePlaylistItem.(*[]*PlaylistItem)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &playlistItemR{}
		}
		args[0] = object.PlaylistID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistItemR{}
			}
			args[i] = obj.PlaylistID
		}
	}

	query := fmt.Sprintf(
		"select * from \"playlist\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Playlist")
	}
	defer results.Close()

	var resultSlice []*Playlist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Playlist")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Playlist = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlaylistID == foreign.ID {
				local.R.Playlist = foreign
				break
			}
		}
	}

	return nil
}

// SetPlaylistG of the playlist_item to the related item.
// Sets o.R.Playlist to related.
// Adds o to related.R.PlaylistItems.
// Uses the global database handle.
func (o *PlaylistItem) SetPlaylistG(insert bool, related *Playlist) error {
	return o.SetPlaylist(boil.GetDB(), insert, related)
}

// SetPlaylistP of the playlist_item to the related item.
// Sets o.R.Playlist to related.
// Adds o to related.R.PlaylistItems.
// Panics on error.
func (o *PlaylistItem) SetPlaylistP(exec boil.Executor, insert bool, related *Playlist) {
	if err := o.SetPlaylist(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPlaylistGP of the playlist_item to the related item.
// Sets o.R.Playlist to related.
// Adds o to related.R.PlaylistItems.
// Uses the global database handle and panics on error.
func (o *PlaylistItem) SetPlaylistGP(insert bool, related *Playlist) {
	if err := o.SetPlaylist(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPlaylist of the playlist_item to the related item.
// Sets o.R.Playlist to related.
// Adds o to related.R.PlaylistItems.
func (o *PlaylistItem) SetPlaylist(exec boil.Executor, insert bool, related *Playlist) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"playlist_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"playlist_id"}),
		strmangle.WhereClause("\"", "\"", 2, playlistItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlaylistID = related.ID

	if o.R == nil {
		o.R = &playlistItemR{
			Playlist: related,
		}
	} else {
		o.R.Playlist = related
	}

	if related.R == nil {
		related.R = &playlistR{
			PlaylistItems: PlaylistItemSlice{o},
		}
	} else {
		related.R.PlaylistItems = append(related.R.PlaylistItems, o)
	}

	return nil
}

// PlaylistItemsG retrieves all records.
func PlaylistItemsG(mods ...qm.QueryMod) playlistItemQuery {
	return PlaylistItems(boil.GetDB(), mods...)
}

// PlaylistItems retrieves all the records using an executor.
func PlaylistItems(exec boil.Executor, mods ...qm.QueryMod) playlistItemQuery {
	mods = append(mods, qm.From("\"playlist_item\""))
	return playlistItemQuery{NewQuery(exec, mods...)}
}

// FindPlaylistItemG retrieves a single record by ID.
func FindPlaylistItemG(id int64, selectCols ...string) (*PlaylistItem, error) {
	return FindPlaylistItem(boil.GetDB(), id, selectCols...)
}

// FindPlaylistItemGP retrieves a single record by ID, and panics on error.
func FindPlaylistItemGP(id int64, selectCols ...string) *PlaylistItem {
	retobj, err := FindPlaylistItem(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPlaylistItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlaylistItem(exec boil.Executor, id int64, selectCols ...string) (*PlaylistItem, error) {
	playlistItemObj := &PlaylistItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"playlist_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(playlistItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from playlist_item")
	}

	return playlistItemObj, nil
}

// FindPlaylistItemP retrieves a single record by ID with an executor, and panics on error.
func FindPlaylistItemP(exec boil.Executor, id int64, selectCols ...string) *PlaylistItem {
	retobj, err := FindPlaylistItem(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PlaylistItem) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *PlaylistItem) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *PlaylistItem) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *PlaylistItem) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no playlist_item provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(playlistItemColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	playlistItemInsertCacheMut.RLock()
	cache, cached := playlistItemInsertCache[key]
	playlistItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			playlistItemColumns,
			playlistItemColumnsWithDefault,
			playlistItemColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"playlist_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"playlist_item\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into playlist_item")
	}

	if !cached {
		playlistItemInsertCacheMut.Lock()
		playlistItemInsertCache[key] = cache
		playlistItemInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single PlaylistItem record. See Update for
// whitelist behavior description.
func (o *PlaylistItem) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single PlaylistItem record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *PlaylistItem) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the PlaylistItem, and panics on error.
// See Update for whitelist behavior description.
func (o *PlaylistItem) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the PlaylistItem.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *PlaylistItem) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	playlistItemUpdateCacheMut.RLock()
	cache, cached := playlistItemUpdateCache[key]
	playlistItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			playlistItemColumns,
			playlistItemPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update playlist_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"playlist_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playlistItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, append(wl, playlistItemPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update playlist_item row")
	}

	if !cached {
		playlistItemUpdateCacheMut.Lock()
		playlistItemUpdateCache[key] = cache
		playlistItemUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q playlistItemQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q playlistItemQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for playlist_item")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PlaylistItemSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PlaylistItemSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PlaylistItemSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaylistItemSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"playlist_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playlistItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in playlistItem slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PlaylistItem) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *PlaylistItem) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *PlaylistItem) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PlaylistItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no playlist_item provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playlistItemUpsertCacheMut.RLock()
	cache, cached := playlistItemUpsertCache[key]
	playlistItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			playlistItemColumns,
			playlistItemColumnsWithDefault,
			playlistItemColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			playlistItemColumns,
			playlistItemPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert playlist_item, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playlistItemPrimaryKeyColumns))
			copy(conflict, playlistItemPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"playlist_item\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playlistItemType, playlistItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert playlist_item")
	}

	if !cached {
		playlistItemUpsertCacheMut.Lock()
		playlistItemUpsertCache[key] = cache
		playlistItemUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single PlaylistItem record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PlaylistItem) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single PlaylistItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PlaylistItem) DeleteG() error {
	if o == nil {
		return errors.New("models: no PlaylistItem provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single PlaylistItem record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PlaylistItem) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single PlaylistItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlaylistItem) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no PlaylistItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playlistItemPrimaryKeyMapping)
	sql := "DELETE FROM \"playlist_item\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from playlist_item")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q playlistItemQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q playlistItemQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no playlistItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from playlist_item")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PlaylistItemSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PlaylistItemSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no PlaylistItem slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PlaylistItemSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaylistItemSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no PlaylistItem slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"playlist_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from playlistItem slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *PlaylistItem) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *PlaylistItem) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PlaylistItem) ReloadG() error {
	if o == nil {
		return errors.New("models: no PlaylistItem provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlaylistItem) Reload(exec boil.Executor) error {
	ret, err := FindPlaylistItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PlaylistItemSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PlaylistItemSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistItemSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PlaylistItemSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	playlistItems := PlaylistItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"playlist_item\".* FROM \"playlist_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&playlistItems)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaylistItemSlice")
	}

	*o = playlistItems

	return nil
}

// PlaylistItemExists checks if the PlaylistItem row exists.
func PlaylistItemExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"playlist_item\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if playlist_item exists")
	}

	return exists, nil
}

// PlaylistItemExistsG checks if the PlaylistItem row exists.
func PlaylistItemExistsG(id int64) (bool, error) {
	return PlaylistItemExists(boil.GetDB(), id)
}

// PlaylistItemExistsGP checks if the PlaylistItem row exists. Panics on error.
func PlaylistItemExistsGP(id int64) bool {
	e, err := PlaylistItemExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PlaylistItemExistsP checks if the PlaylistItem row exists. Panics on error.
func PlaylistItemExistsP(exec boil.Executor, id int64) bool {
	e, err := PlaylistItemExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
