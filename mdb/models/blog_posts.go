// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/Bnei-Baruch/sqlboiler/boil"
	"github.com/Bnei-Baruch/sqlboiler/queries"
	"github.com/Bnei-Baruch/sqlboiler/queries/qm"
	"github.com/Bnei-Baruch/sqlboiler/strmangle"
	"github.com/pkg/errors"
)

// BlogPost is an object representing the database table.
type BlogPost struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlogID    int64     `boil:"blog_id" json:"blog_id" toml:"blog_id" yaml:"blog_id"`
	WPID      int64     `boil:"wp_id" json:"wp_id" toml:"wp_id" yaml:"wp_id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content   string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	PostedAt  time.Time `boil:"posted_at" json:"posted_at" toml:"posted_at" yaml:"posted_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Link      string    `boil:"link" json:"link" toml:"link" yaml:"link"`
	Filtered  bool      `boil:"filtered" json:"filtered" toml:"filtered" yaml:"filtered"`

	R *blogPostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blogPostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlogPostColumns = struct {
	ID        string
	BlogID    string
	WPID      string
	Title     string
	Content   string
	PostedAt  string
	CreatedAt string
	Link      string
	Filtered  string
}{
	ID:        "id",
	BlogID:    "blog_id",
	WPID:      "wp_id",
	Title:     "title",
	Content:   "content",
	PostedAt:  "posted_at",
	CreatedAt: "created_at",
	Link:      "link",
	Filtered:  "filtered",
}

// blogPostR is where relationships are stored.
type blogPostR struct {
	Blog *Blog
}

// blogPostL is where Load methods for each relationship are stored.
type blogPostL struct{}

var (
	blogPostColumns               = []string{"id", "blog_id", "wp_id", "title", "content", "posted_at", "created_at", "link", "filtered"}
	blogPostColumnsWithoutDefault = []string{"blog_id", "wp_id", "title", "content", "posted_at"}
	blogPostColumnsWithDefault    = []string{"id", "created_at", "link", "filtered"}
	blogPostPrimaryKeyColumns     = []string{"id"}
)

type (
	// BlogPostSlice is an alias for a slice of pointers to BlogPost.
	// This should generally be used opposed to []BlogPost.
	BlogPostSlice []*BlogPost

	blogPostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blogPostType                 = reflect.TypeOf(&BlogPost{})
	blogPostMapping              = queries.MakeStructMapping(blogPostType)
	blogPostPrimaryKeyMapping, _ = queries.BindMapping(blogPostType, blogPostMapping, blogPostPrimaryKeyColumns)
	blogPostInsertCacheMut       sync.RWMutex
	blogPostInsertCache          = make(map[string]insertCache)
	blogPostUpdateCacheMut       sync.RWMutex
	blogPostUpdateCache          = make(map[string]updateCache)
	blogPostUpsertCacheMut       sync.RWMutex
	blogPostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single blogPost record from the query, and panics on error.
func (q blogPostQuery) OneP() *BlogPost {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single blogPost record from the query.
func (q blogPostQuery) One() (*BlogPost, error) {
	o := &BlogPost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for blog_posts")
	}

	return o, nil
}

// AllP returns all BlogPost records from the query, and panics on error.
func (q blogPostQuery) AllP() BlogPostSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all BlogPost records from the query.
func (q blogPostQuery) All() (BlogPostSlice, error) {
	var o []*BlogPost

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to BlogPost slice")
	}

	return o, nil
}

// CountP returns the count of all BlogPost records in the query, and panics on error.
func (q blogPostQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all BlogPost records in the query.
func (q blogPostQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count blog_posts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q blogPostQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q blogPostQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if blog_posts exists")
	}

	return count > 0, nil
}

// BlogG pointed to by the foreign key.
func (o *BlogPost) BlogG(mods ...qm.QueryMod) blogQuery {
	return o.Blog(boil.GetDB(), mods...)
}

// Blog pointed to by the foreign key.
func (o *BlogPost) Blog(exec boil.Executor, mods ...qm.QueryMod) blogQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.BlogID),
	}

	queryMods = append(queryMods, mods...)

	query := Blogs(exec, queryMods...)
	queries.SetFrom(query.Query, "\"blogs\"")

	return query
} // LoadBlog allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (blogPostL) LoadBlog(e boil.Executor, singular bool, maybeBlogPost interface{}) error {
	var slice []*BlogPost
	var object *BlogPost

	count := 1
	if singular {
		object = maybeBlogPost.(*BlogPost)
	} else {
		slice = *maybeBlogPost.(*[]*BlogPost)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &blogPostR{}
		}
		args[0] = object.BlogID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &blogPostR{}
			}
			args[i] = obj.BlogID
		}
	}

	query := fmt.Sprintf(
		"select * from \"blogs\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blog")
	}
	defer results.Close()

	var resultSlice []*Blog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blog")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Blog = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlogID == foreign.ID {
				local.R.Blog = foreign
				break
			}
		}
	}

	return nil
}

// SetBlogG of the blog_post to the related item.
// Sets o.R.Blog to related.
// Adds o to related.R.BlogPosts.
// Uses the global database handle.
func (o *BlogPost) SetBlogG(insert bool, related *Blog) error {
	return o.SetBlog(boil.GetDB(), insert, related)
}

// SetBlogP of the blog_post to the related item.
// Sets o.R.Blog to related.
// Adds o to related.R.BlogPosts.
// Panics on error.
func (o *BlogPost) SetBlogP(exec boil.Executor, insert bool, related *Blog) {
	if err := o.SetBlog(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlogGP of the blog_post to the related item.
// Sets o.R.Blog to related.
// Adds o to related.R.BlogPosts.
// Uses the global database handle and panics on error.
func (o *BlogPost) SetBlogGP(insert bool, related *Blog) {
	if err := o.SetBlog(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlog of the blog_post to the related item.
// Sets o.R.Blog to related.
// Adds o to related.R.BlogPosts.
func (o *BlogPost) SetBlog(exec boil.Executor, insert bool, related *Blog) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blog_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blog_id"}),
		strmangle.WhereClause("\"", "\"", 2, blogPostPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlogID = related.ID

	if o.R == nil {
		o.R = &blogPostR{
			Blog: related,
		}
	} else {
		o.R.Blog = related
	}

	if related.R == nil {
		related.R = &blogR{
			BlogPosts: BlogPostSlice{o},
		}
	} else {
		related.R.BlogPosts = append(related.R.BlogPosts, o)
	}

	return nil
}

// BlogPostsG retrieves all records.
func BlogPostsG(mods ...qm.QueryMod) blogPostQuery {
	return BlogPosts(boil.GetDB(), mods...)
}

// BlogPosts retrieves all the records using an executor.
func BlogPosts(exec boil.Executor, mods ...qm.QueryMod) blogPostQuery {
	mods = append(mods, qm.From("\"blog_posts\""))
	return blogPostQuery{NewQuery(exec, mods...)}
}

// FindBlogPostG retrieves a single record by ID.
func FindBlogPostG(id int64, selectCols ...string) (*BlogPost, error) {
	return FindBlogPost(boil.GetDB(), id, selectCols...)
}

// FindBlogPostGP retrieves a single record by ID, and panics on error.
func FindBlogPostGP(id int64, selectCols ...string) *BlogPost {
	retobj, err := FindBlogPost(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindBlogPost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlogPost(exec boil.Executor, id int64, selectCols ...string) (*BlogPost, error) {
	blogPostObj := &BlogPost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blog_posts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(blogPostObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from blog_posts")
	}

	return blogPostObj, nil
}

// FindBlogPostP retrieves a single record by ID with an executor, and panics on error.
func FindBlogPostP(exec boil.Executor, id int64, selectCols ...string) *BlogPost {
	retobj, err := FindBlogPost(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BlogPost) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *BlogPost) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *BlogPost) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *BlogPost) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("mdbmodels: no blog_posts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(blogPostColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	blogPostInsertCacheMut.RLock()
	cache, cached := blogPostInsertCache[key]
	blogPostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			blogPostColumns,
			blogPostColumnsWithDefault,
			blogPostColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blogPostType, blogPostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blog_posts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blog_posts\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into blog_posts")
	}

	if !cached {
		blogPostInsertCacheMut.Lock()
		blogPostInsertCache[key] = cache
		blogPostInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BlogPost record. See Update for
// whitelist behavior description.
func (o *BlogPost) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single BlogPost record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *BlogPost) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the BlogPost, and panics on error.
// See Update for whitelist behavior description.
func (o *BlogPost) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the BlogPost.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *BlogPost) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	blogPostUpdateCacheMut.RLock()
	cache, cached := blogPostUpdateCache[key]
	blogPostUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			blogPostColumns,
			blogPostPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("mdbmodels: unable to update blog_posts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blog_posts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blogPostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, append(wl, blogPostPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to update blog_posts row")
	}

	if !cached {
		blogPostUpdateCacheMut.Lock()
		blogPostUpdateCache[key] = cache
		blogPostUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q blogPostQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q blogPostQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to update all for blog_posts")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BlogPostSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o BlogPostSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o BlogPostSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlogPostSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blog_posts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blogPostPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to update all in blogPost slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BlogPost) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *BlogPost) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *BlogPost) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *BlogPost) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("mdbmodels: no blog_posts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(blogPostColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blogPostUpsertCacheMut.RLock()
	cache, cached := blogPostUpsertCache[key]
	blogPostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			blogPostColumns,
			blogPostColumnsWithDefault,
			blogPostColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			blogPostColumns,
			blogPostPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert blog_posts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blogPostPrimaryKeyColumns))
			copy(conflict, blogPostPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"blog_posts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blogPostType, blogPostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blogPostType, blogPostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert blog_posts")
	}

	if !cached {
		blogPostUpsertCacheMut.Lock()
		blogPostUpsertCache[key] = cache
		blogPostUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single BlogPost record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlogPost) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single BlogPost record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BlogPost) DeleteG() error {
	if o == nil {
		return errors.New("mdbmodels: no BlogPost provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single BlogPost record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *BlogPost) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single BlogPost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlogPost) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("mdbmodels: no BlogPost provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blogPostPrimaryKeyMapping)
	sql := "DELETE FROM \"blog_posts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to delete from blog_posts")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q blogPostQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q blogPostQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("mdbmodels: no blogPostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to delete all from blog_posts")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o BlogPostSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o BlogPostSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("mdbmodels: no BlogPost slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o BlogPostSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlogPostSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("mdbmodels: no BlogPost slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blog_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blogPostPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to delete all from blogPost slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *BlogPost) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *BlogPost) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BlogPost) ReloadG() error {
	if o == nil {
		return errors.New("mdbmodels: no BlogPost provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlogPost) Reload(exec boil.Executor) error {
	ret, err := FindBlogPost(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlogPostSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *BlogPostSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlogPostSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("mdbmodels: empty BlogPostSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlogPostSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	blogPosts := BlogPostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogPostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blog_posts\".* FROM \"blog_posts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blogPostPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&blogPosts)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in BlogPostSlice")
	}

	*o = blogPosts

	return nil
}

// BlogPostExists checks if the BlogPost row exists.
func BlogPostExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blog_posts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if blog_posts exists")
	}

	return exists, nil
}

// BlogPostExistsG checks if the BlogPost row exists.
func BlogPostExistsG(id int64) (bool, error) {
	return BlogPostExists(boil.GetDB(), id)
}

// BlogPostExistsGP checks if the BlogPost row exists. Panics on error.
func BlogPostExistsGP(id int64) bool {
	e, err := BlogPostExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// BlogPostExistsP checks if the BlogPost row exists. Panics on error.
func BlogPostExistsP(exec boil.Executor, id int64) bool {
	e, err := BlogPostExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
