// Code generated by SQLBoiler (https://github.com/Bnei-Baruch/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/Bnei-Baruch/sqlboiler/boil"
	"github.com/Bnei-Baruch/sqlboiler/queries"
	"github.com/Bnei-Baruch/sqlboiler/queries/qm"
	"github.com/Bnei-Baruch/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/volatiletech/null.v6"
)

// Playlist is an object representing the database table.
type Playlist struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID  string      `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Parameters null.JSON   `boil:"parameters" json:"parameters,omitempty" toml:"parameters" yaml:"parameters,omitempty"`
	Public     null.Bool   `boil:"public" json:"public,omitempty" toml:"public" yaml:"public,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LastPlayed null.String `boil:"last_played" json:"last_played,omitempty" toml:"last_played" yaml:"last_played,omitempty"`

	R *playlistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playlistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlaylistColumns = struct {
	ID         string
	AccountID  string
	Name       string
	Parameters string
	Public     string
	CreatedAt  string
	LastPlayed string
}{
	ID:         "id",
	AccountID:  "account_id",
	Name:       "name",
	Parameters: "parameters",
	Public:     "public",
	CreatedAt:  "created_at",
	LastPlayed: "last_played",
}

// playlistR is where relationships are stored.
type playlistR struct {
	PlaylistItems PlaylistItemSlice
}

// playlistL is where Load methods for each relationship are stored.
type playlistL struct{}

var (
	playlistColumns               = []string{"id", "account_id", "name", "parameters", "public", "created_at", "last_played"}
	playlistColumnsWithoutDefault = []string{"account_id", "name", "parameters", "public", "last_played"}
	playlistColumnsWithDefault    = []string{"id", "created_at"}
	playlistPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlaylistSlice is an alias for a slice of pointers to Playlist.
	// This should generally be used opposed to []Playlist.
	PlaylistSlice []*Playlist

	playlistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playlistType                 = reflect.TypeOf(&Playlist{})
	playlistMapping              = queries.MakeStructMapping(playlistType)
	playlistPrimaryKeyMapping, _ = queries.BindMapping(playlistType, playlistMapping, playlistPrimaryKeyColumns)
	playlistInsertCacheMut       sync.RWMutex
	playlistInsertCache          = make(map[string]insertCache)
	playlistUpdateCacheMut       sync.RWMutex
	playlistUpdateCache          = make(map[string]updateCache)
	playlistUpsertCacheMut       sync.RWMutex
	playlistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single playlist record from the query, and panics on error.
func (q playlistQuery) OneP() *Playlist {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single playlist record from the query.
func (q playlistQuery) One() (*Playlist, error) {
	o := &Playlist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for playlist")
	}

	return o, nil
}

// AllP returns all Playlist records from the query, and panics on error.
func (q playlistQuery) AllP() PlaylistSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Playlist records from the query.
func (q playlistQuery) All() (PlaylistSlice, error) {
	var o []*Playlist

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Playlist slice")
	}

	return o, nil
}

// CountP returns the count of all Playlist records in the query, and panics on error.
func (q playlistQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Playlist records in the query.
func (q playlistQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count playlist rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q playlistQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q playlistQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if playlist exists")
	}

	return count > 0, nil
}

// PlaylistItemsG retrieves all the playlist_item's playlist item.
func (o *Playlist) PlaylistItemsG(mods ...qm.QueryMod) playlistItemQuery {
	return o.PlaylistItems(boil.GetDB(), mods...)
}

// PlaylistItems retrieves all the playlist_item's playlist item with an executor.
func (o *Playlist) PlaylistItems(exec boil.Executor, mods ...qm.QueryMod) playlistItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"playlist_item\".\"playlist_id\"=?", o.ID),
	)

	query := PlaylistItems(exec, queryMods...)
	queries.SetFrom(query.Query, "\"playlist_item\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"playlist_item\".*"})
	}

	return query
}

// LoadPlaylistItems allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (playlistL) LoadPlaylistItems(e boil.Executor, singular bool, maybePlaylist interface{}) error {
	var slice []*Playlist
	var object *Playlist

	count := 1
	if singular {
		object = maybePlaylist.(*Playlist)
	} else {
		slice = *maybePlaylist.(*[]*Playlist)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &playlistR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &playlistR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"playlist_item\" where \"playlist_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load playlist_item")
	}
	defer results.Close()

	var resultSlice []*PlaylistItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice playlist_item")
	}

	if singular {
		object.R.PlaylistItems = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PlaylistID {
				local.R.PlaylistItems = append(local.R.PlaylistItems, foreign)
				break
			}
		}
	}

	return nil
}

// AddPlaylistItemsG adds the given related objects to the existing relationships
// of the playlist, optionally inserting them as new records.
// Appends related to o.R.PlaylistItems.
// Sets related.R.Playlist appropriately.
// Uses the global database handle.
func (o *Playlist) AddPlaylistItemsG(insert bool, related ...*PlaylistItem) error {
	return o.AddPlaylistItems(boil.GetDB(), insert, related...)
}

// AddPlaylistItemsP adds the given related objects to the existing relationships
// of the playlist, optionally inserting them as new records.
// Appends related to o.R.PlaylistItems.
// Sets related.R.Playlist appropriately.
// Panics on error.
func (o *Playlist) AddPlaylistItemsP(exec boil.Executor, insert bool, related ...*PlaylistItem) {
	if err := o.AddPlaylistItems(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPlaylistItemsGP adds the given related objects to the existing relationships
// of the playlist, optionally inserting them as new records.
// Appends related to o.R.PlaylistItems.
// Sets related.R.Playlist appropriately.
// Uses the global database handle and panics on error.
func (o *Playlist) AddPlaylistItemsGP(insert bool, related ...*PlaylistItem) {
	if err := o.AddPlaylistItems(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPlaylistItems adds the given related objects to the existing relationships
// of the playlist, optionally inserting them as new records.
// Appends related to o.R.PlaylistItems.
// Sets related.R.Playlist appropriately.
func (o *Playlist) AddPlaylistItems(exec boil.Executor, insert bool, related ...*PlaylistItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlaylistID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"playlist_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"playlist_id"}),
				strmangle.WhereClause("\"", "\"", 2, playlistItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlaylistID = o.ID
		}
	}

	if o.R == nil {
		o.R = &playlistR{
			PlaylistItems: related,
		}
	} else {
		o.R.PlaylistItems = append(o.R.PlaylistItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playlistItemR{
				Playlist: o,
			}
		} else {
			rel.R.Playlist = o
		}
	}
	return nil
}

// PlaylistsG retrieves all records.
func PlaylistsG(mods ...qm.QueryMod) playlistQuery {
	return Playlists(boil.GetDB(), mods...)
}

// Playlists retrieves all the records using an executor.
func Playlists(exec boil.Executor, mods ...qm.QueryMod) playlistQuery {
	mods = append(mods, qm.From("\"playlist\""))
	return playlistQuery{NewQuery(exec, mods...)}
}

// FindPlaylistG retrieves a single record by ID.
func FindPlaylistG(id int64, selectCols ...string) (*Playlist, error) {
	return FindPlaylist(boil.GetDB(), id, selectCols...)
}

// FindPlaylistGP retrieves a single record by ID, and panics on error.
func FindPlaylistGP(id int64, selectCols ...string) *Playlist {
	retobj, err := FindPlaylist(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPlaylist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlaylist(exec boil.Executor, id int64, selectCols ...string) (*Playlist, error) {
	playlistObj := &Playlist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"playlist\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(playlistObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from playlist")
	}

	return playlistObj, nil
}

// FindPlaylistP retrieves a single record by ID with an executor, and panics on error.
func FindPlaylistP(exec boil.Executor, id int64, selectCols ...string) *Playlist {
	retobj, err := FindPlaylist(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Playlist) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Playlist) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Playlist) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Playlist) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no playlist provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	playlistInsertCacheMut.RLock()
	cache, cached := playlistInsertCache[key]
	playlistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			playlistColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"playlist\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"playlist\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into playlist")
	}

	if !cached {
		playlistInsertCacheMut.Lock()
		playlistInsertCache[key] = cache
		playlistInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Playlist record. See Update for
// whitelist behavior description.
func (o *Playlist) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Playlist record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Playlist) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Playlist, and panics on error.
// See Update for whitelist behavior description.
func (o *Playlist) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Playlist.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Playlist) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	playlistUpdateCacheMut.RLock()
	cache, cached := playlistUpdateCache[key]
	playlistUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			playlistColumns,
			playlistPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update playlist, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"playlist\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playlistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, append(wl, playlistPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update playlist row")
	}

	if !cached {
		playlistUpdateCacheMut.Lock()
		playlistUpdateCache[key] = cache
		playlistUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q playlistQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q playlistQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for playlist")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PlaylistSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PlaylistSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PlaylistSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlaylistSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"playlist\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playlistPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in playlist slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Playlist) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Playlist) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Playlist) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Playlist) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no playlist provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(playlistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playlistUpsertCacheMut.RLock()
	cache, cached := playlistUpsertCache[key]
	playlistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			playlistColumns,
			playlistColumnsWithDefault,
			playlistColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			playlistColumns,
			playlistPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert playlist, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playlistPrimaryKeyColumns))
			copy(conflict, playlistPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"playlist\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playlistType, playlistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playlistType, playlistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert playlist")
	}

	if !cached {
		playlistUpsertCacheMut.Lock()
		playlistUpsertCache[key] = cache
		playlistUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Playlist record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Playlist) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Playlist record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Playlist) DeleteG() error {
	if o == nil {
		return errors.New("models: no Playlist provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Playlist record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Playlist) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Playlist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Playlist) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Playlist provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playlistPrimaryKeyMapping)
	sql := "DELETE FROM \"playlist\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from playlist")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q playlistQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q playlistQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no playlistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from playlist")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PlaylistSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PlaylistSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Playlist slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PlaylistSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlaylistSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Playlist slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"playlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from playlist slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Playlist) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Playlist) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Playlist) ReloadG() error {
	if o == nil {
		return errors.New("models: no Playlist provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Playlist) Reload(exec boil.Executor) error {
	ret, err := FindPlaylist(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PlaylistSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PlaylistSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty PlaylistSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlaylistSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	playlists := PlaylistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"playlist\".* FROM \"playlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playlistPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&playlists)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlaylistSlice")
	}

	*o = playlists

	return nil
}

// PlaylistExists checks if the Playlist row exists.
func PlaylistExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"playlist\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if playlist exists")
	}

	return exists, nil
}

// PlaylistExistsG checks if the Playlist row exists.
func PlaylistExistsG(id int64) (bool, error) {
	return PlaylistExists(boil.GetDB(), id)
}

// PlaylistExistsGP checks if the Playlist row exists. Panics on error.
func PlaylistExistsGP(id int64) bool {
	e, err := PlaylistExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PlaylistExistsP checks if the Playlist row exists. Panics on error.
func PlaylistExistsP(exec boil.Executor, id int64) bool {
	e, err := PlaylistExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
