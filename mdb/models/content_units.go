// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mdbmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ContentUnit is an object representing the database table.
type ContentUnit struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UID        string    `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	TypeID     int64     `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Properties null.JSON `boil:"properties" json:"properties,omitempty" toml:"properties" yaml:"properties,omitempty"`
	Secure     int16     `boil:"secure" json:"secure" toml:"secure" yaml:"secure"`
	Published  bool      `boil:"published" json:"published" toml:"published" yaml:"published"`

	R *contentUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentUnitColumns = struct {
	ID         string
	UID        string
	TypeID     string
	CreatedAt  string
	Properties string
	Secure     string
	Published  string
}{
	ID:         "id",
	UID:        "uid",
	TypeID:     "type_id",
	CreatedAt:  "created_at",
	Properties: "properties",
	Secure:     "secure",
	Published:  "published",
}

var ContentUnitTableColumns = struct {
	ID         string
	UID        string
	TypeID     string
	CreatedAt  string
	Properties string
	Secure     string
	Published  string
}{
	ID:         "content_units.id",
	UID:        "content_units.uid",
	TypeID:     "content_units.type_id",
	CreatedAt:  "content_units.created_at",
	Properties: "content_units.properties",
	Secure:     "content_units.secure",
	Published:  "content_units.published",
}

// Generated where

var ContentUnitWhere = struct {
	ID         whereHelperint64
	UID        whereHelperstring
	TypeID     whereHelperint64
	CreatedAt  whereHelpertime_Time
	Properties whereHelpernull_JSON
	Secure     whereHelperint16
	Published  whereHelperbool
}{
	ID:         whereHelperint64{field: "\"content_units\".\"id\""},
	UID:        whereHelperstring{field: "\"content_units\".\"uid\""},
	TypeID:     whereHelperint64{field: "\"content_units\".\"type_id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"content_units\".\"created_at\""},
	Properties: whereHelpernull_JSON{field: "\"content_units\".\"properties\""},
	Secure:     whereHelperint16{field: "\"content_units\".\"secure\""},
	Published:  whereHelperbool{field: "\"content_units\".\"published\""},
}

// ContentUnitRels is where relationship names are stored.
var ContentUnitRels = struct {
	Type                          string
	CollectionsContentUnits       string
	DerivedContentUnitDerivations string
	SourceContentUnitDerivations  string
	ContentUnitI18ns              string
	ContentUnitsPersons           string
	Publishers                    string
	Sources                       string
	Tags                          string
	Files                         string
	Labels                        string
}{
	Type:                          "Type",
	CollectionsContentUnits:       "CollectionsContentUnits",
	DerivedContentUnitDerivations: "DerivedContentUnitDerivations",
	SourceContentUnitDerivations:  "SourceContentUnitDerivations",
	ContentUnitI18ns:              "ContentUnitI18ns",
	ContentUnitsPersons:           "ContentUnitsPersons",
	Publishers:                    "Publishers",
	Sources:                       "Sources",
	Tags:                          "Tags",
	Files:                         "Files",
	Labels:                        "Labels",
}

// contentUnitR is where relationships are stored.
type contentUnitR struct {
	Type                          *ContentType                `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`
	CollectionsContentUnits       CollectionsContentUnitSlice `boil:"CollectionsContentUnits" json:"CollectionsContentUnits" toml:"CollectionsContentUnits" yaml:"CollectionsContentUnits"`
	DerivedContentUnitDerivations ContentUnitDerivationSlice  `boil:"DerivedContentUnitDerivations" json:"DerivedContentUnitDerivations" toml:"DerivedContentUnitDerivations" yaml:"DerivedContentUnitDerivations"`
	SourceContentUnitDerivations  ContentUnitDerivationSlice  `boil:"SourceContentUnitDerivations" json:"SourceContentUnitDerivations" toml:"SourceContentUnitDerivations" yaml:"SourceContentUnitDerivations"`
	ContentUnitI18ns              ContentUnitI18nSlice        `boil:"ContentUnitI18ns" json:"ContentUnitI18ns" toml:"ContentUnitI18ns" yaml:"ContentUnitI18ns"`
	ContentUnitsPersons           ContentUnitsPersonSlice     `boil:"ContentUnitsPersons" json:"ContentUnitsPersons" toml:"ContentUnitsPersons" yaml:"ContentUnitsPersons"`
	Publishers                    PublisherSlice              `boil:"Publishers" json:"Publishers" toml:"Publishers" yaml:"Publishers"`
	Sources                       SourceSlice                 `boil:"Sources" json:"Sources" toml:"Sources" yaml:"Sources"`
	Tags                          TagSlice                    `boil:"Tags" json:"Tags" toml:"Tags" yaml:"Tags"`
	Files                         FileSlice                   `boil:"Files" json:"Files" toml:"Files" yaml:"Files"`
	Labels                        LabelSlice                  `boil:"Labels" json:"Labels" toml:"Labels" yaml:"Labels"`
}

// NewStruct creates a new relationship struct
func (*contentUnitR) NewStruct() *contentUnitR {
	return &contentUnitR{}
}

// contentUnitL is where Load methods for each relationship are stored.
type contentUnitL struct{}

var (
	contentUnitAllColumns            = []string{"id", "uid", "type_id", "created_at", "properties", "secure", "published"}
	contentUnitColumnsWithoutDefault = []string{"uid", "type_id"}
	contentUnitColumnsWithDefault    = []string{"id", "created_at", "properties", "secure", "published"}
	contentUnitPrimaryKeyColumns     = []string{"id"}
	contentUnitGeneratedColumns      = []string{}
)

type (
	// ContentUnitSlice is an alias for a slice of pointers to ContentUnit.
	// This should almost always be used instead of []ContentUnit.
	ContentUnitSlice []*ContentUnit

	contentUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentUnitType                 = reflect.TypeOf(&ContentUnit{})
	contentUnitMapping              = queries.MakeStructMapping(contentUnitType)
	contentUnitPrimaryKeyMapping, _ = queries.BindMapping(contentUnitType, contentUnitMapping, contentUnitPrimaryKeyColumns)
	contentUnitInsertCacheMut       sync.RWMutex
	contentUnitInsertCache          = make(map[string]insertCache)
	contentUnitUpdateCacheMut       sync.RWMutex
	contentUnitUpdateCache          = make(map[string]updateCache)
	contentUnitUpsertCacheMut       sync.RWMutex
	contentUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single contentUnit record from the query.
func (q contentUnitQuery) One(exec boil.Executor) (*ContentUnit, error) {
	o := &ContentUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: failed to execute a one query for content_units")
	}

	return o, nil
}

// All returns all ContentUnit records from the query.
func (q contentUnitQuery) All(exec boil.Executor) (ContentUnitSlice, error) {
	var o []*ContentUnit

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mdbmodels: failed to assign all query results to ContentUnit slice")
	}

	return o, nil
}

// Count returns the count of all ContentUnit records in the query.
func (q contentUnitQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to count content_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contentUnitQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: failed to check if content_units exists")
	}

	return count > 0, nil
}

// Type pointed to by the foreign key.
func (o *ContentUnit) Type(mods ...qm.QueryMod) contentTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TypeID),
	}

	queryMods = append(queryMods, mods...)

	query := ContentTypes(queryMods...)
	queries.SetFrom(query.Query, "\"content_types\"")

	return query
}

// CollectionsContentUnits retrieves all the collections_content_unit's CollectionsContentUnits with an executor.
func (o *ContentUnit) CollectionsContentUnits(mods ...qm.QueryMod) collectionsContentUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"collections_content_units\".\"content_unit_id\"=?", o.ID),
	)

	query := CollectionsContentUnits(queryMods...)
	queries.SetFrom(query.Query, "\"collections_content_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"collections_content_units\".*"})
	}

	return query
}

// DerivedContentUnitDerivations retrieves all the content_unit_derivation's ContentUnitDerivations with an executor via derived_id column.
func (o *ContentUnit) DerivedContentUnitDerivations(mods ...qm.QueryMod) contentUnitDerivationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"content_unit_derivations\".\"derived_id\"=?", o.ID),
	)

	query := ContentUnitDerivations(queryMods...)
	queries.SetFrom(query.Query, "\"content_unit_derivations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"content_unit_derivations\".*"})
	}

	return query
}

// SourceContentUnitDerivations retrieves all the content_unit_derivation's ContentUnitDerivations with an executor via source_id column.
func (o *ContentUnit) SourceContentUnitDerivations(mods ...qm.QueryMod) contentUnitDerivationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"content_unit_derivations\".\"source_id\"=?", o.ID),
	)

	query := ContentUnitDerivations(queryMods...)
	queries.SetFrom(query.Query, "\"content_unit_derivations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"content_unit_derivations\".*"})
	}

	return query
}

// ContentUnitI18ns retrieves all the content_unit_i18n's ContentUnitI18ns with an executor.
func (o *ContentUnit) ContentUnitI18ns(mods ...qm.QueryMod) contentUnitI18nQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"content_unit_i18n\".\"content_unit_id\"=?", o.ID),
	)

	query := ContentUnitI18ns(queryMods...)
	queries.SetFrom(query.Query, "\"content_unit_i18n\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"content_unit_i18n\".*"})
	}

	return query
}

// ContentUnitsPersons retrieves all the content_units_person's ContentUnitsPersons with an executor.
func (o *ContentUnit) ContentUnitsPersons(mods ...qm.QueryMod) contentUnitsPersonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"content_units_persons\".\"content_unit_id\"=?", o.ID),
	)

	query := ContentUnitsPersons(queryMods...)
	queries.SetFrom(query.Query, "\"content_units_persons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"content_units_persons\".*"})
	}

	return query
}

// Publishers retrieves all the publisher's Publishers with an executor.
func (o *ContentUnit) Publishers(mods ...qm.QueryMod) publisherQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"content_units_publishers\" on \"publishers\".\"id\" = \"content_units_publishers\".\"publisher_id\""),
		qm.Where("\"content_units_publishers\".\"content_unit_id\"=?", o.ID),
	)

	query := Publishers(queryMods...)
	queries.SetFrom(query.Query, "\"publishers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"publishers\".*"})
	}

	return query
}

// Sources retrieves all the source's Sources with an executor.
func (o *ContentUnit) Sources(mods ...qm.QueryMod) sourceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"content_units_sources\" on \"sources\".\"id\" = \"content_units_sources\".\"source_id\""),
		qm.Where("\"content_units_sources\".\"content_unit_id\"=?", o.ID),
	)

	query := Sources(queryMods...)
	queries.SetFrom(query.Query, "\"sources\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"sources\".*"})
	}

	return query
}

// Tags retrieves all the tag's Tags with an executor.
func (o *ContentUnit) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"content_units_tags\" on \"tags\".\"id\" = \"content_units_tags\".\"tag_id\""),
		qm.Where("\"content_units_tags\".\"content_unit_id\"=?", o.ID),
	)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "\"tags\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tags\".*"})
	}

	return query
}

// Files retrieves all the file's Files with an executor.
func (o *ContentUnit) Files(mods ...qm.QueryMod) fileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"files\".\"content_unit_id\"=?", o.ID),
	)

	query := Files(queryMods...)
	queries.SetFrom(query.Query, "\"files\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"files\".*"})
	}

	return query
}

// Labels retrieves all the label's Labels with an executor.
func (o *ContentUnit) Labels(mods ...qm.QueryMod) labelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"labels\".\"content_unit_id\"=?", o.ID),
	)

	query := Labels(queryMods...)
	queries.SetFrom(query.Query, "\"labels\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"labels\".*"})
	}

	return query
}

// LoadType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentUnitL) LoadType(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.TypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.TypeID {
					continue Outer
				}
			}

			args = append(args, obj.TypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_types`),
		qm.WhereIn(`content_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentType")
	}

	var resultSlice []*ContentType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_types")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Type = foreign
		if foreign.R == nil {
			foreign.R = &contentTypeR{}
		}
		foreign.R.TypeContentUnits = append(foreign.R.TypeContentUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TypeID == foreign.ID {
				local.R.Type = foreign
				if foreign.R == nil {
					foreign.R = &contentTypeR{}
				}
				foreign.R.TypeContentUnits = append(foreign.R.TypeContentUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionsContentUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadCollectionsContentUnits(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections_content_units`),
		qm.WhereIn(`collections_content_units.content_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collections_content_units")
	}

	var resultSlice []*CollectionsContentUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collections_content_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collections_content_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections_content_units")
	}

	if singular {
		object.R.CollectionsContentUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionsContentUnitR{}
			}
			foreign.R.ContentUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentUnitID {
				local.R.CollectionsContentUnits = append(local.R.CollectionsContentUnits, foreign)
				if foreign.R == nil {
					foreign.R = &collectionsContentUnitR{}
				}
				foreign.R.ContentUnit = local
				break
			}
		}
	}

	return nil
}

// LoadDerivedContentUnitDerivations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadDerivedContentUnitDerivations(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_unit_derivations`),
		qm.WhereIn(`content_unit_derivations.derived_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load content_unit_derivations")
	}

	var resultSlice []*ContentUnitDerivation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice content_unit_derivations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on content_unit_derivations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_unit_derivations")
	}

	if singular {
		object.R.DerivedContentUnitDerivations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contentUnitDerivationR{}
			}
			foreign.R.Derived = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DerivedID {
				local.R.DerivedContentUnitDerivations = append(local.R.DerivedContentUnitDerivations, foreign)
				if foreign.R == nil {
					foreign.R = &contentUnitDerivationR{}
				}
				foreign.R.Derived = local
				break
			}
		}
	}

	return nil
}

// LoadSourceContentUnitDerivations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadSourceContentUnitDerivations(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_unit_derivations`),
		qm.WhereIn(`content_unit_derivations.source_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load content_unit_derivations")
	}

	var resultSlice []*ContentUnitDerivation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice content_unit_derivations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on content_unit_derivations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_unit_derivations")
	}

	if singular {
		object.R.SourceContentUnitDerivations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contentUnitDerivationR{}
			}
			foreign.R.Source = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SourceID {
				local.R.SourceContentUnitDerivations = append(local.R.SourceContentUnitDerivations, foreign)
				if foreign.R == nil {
					foreign.R = &contentUnitDerivationR{}
				}
				foreign.R.Source = local
				break
			}
		}
	}

	return nil
}

// LoadContentUnitI18ns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadContentUnitI18ns(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_unit_i18n`),
		qm.WhereIn(`content_unit_i18n.content_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load content_unit_i18n")
	}

	var resultSlice []*ContentUnitI18n
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice content_unit_i18n")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on content_unit_i18n")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_unit_i18n")
	}

	if singular {
		object.R.ContentUnitI18ns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contentUnitI18nR{}
			}
			foreign.R.ContentUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentUnitID {
				local.R.ContentUnitI18ns = append(local.R.ContentUnitI18ns, foreign)
				if foreign.R == nil {
					foreign.R = &contentUnitI18nR{}
				}
				foreign.R.ContentUnit = local
				break
			}
		}
	}

	return nil
}

// LoadContentUnitsPersons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadContentUnitsPersons(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`content_units_persons`),
		qm.WhereIn(`content_units_persons.content_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load content_units_persons")
	}

	var resultSlice []*ContentUnitsPerson
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice content_units_persons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on content_units_persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_units_persons")
	}

	if singular {
		object.R.ContentUnitsPersons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contentUnitsPersonR{}
			}
			foreign.R.ContentUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentUnitID {
				local.R.ContentUnitsPersons = append(local.R.ContentUnitsPersons, foreign)
				if foreign.R == nil {
					foreign.R = &contentUnitsPersonR{}
				}
				foreign.R.ContentUnit = local
				break
			}
		}
	}

	return nil
}

// LoadPublishers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadPublishers(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"publishers\".id, \"publishers\".uid, \"publishers\".pattern, \"a\".\"content_unit_id\""),
		qm.From("\"publishers\""),
		qm.InnerJoin("\"content_units_publishers\" as \"a\" on \"publishers\".\"id\" = \"a\".\"publisher_id\""),
		qm.WhereIn("\"a\".\"content_unit_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load publishers")
	}

	var resultSlice []*Publisher

	var localJoinCols []int64
	for results.Next() {
		one := new(Publisher)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.UID, &one.Pattern, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for publishers")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice publishers")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on publishers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publishers")
	}

	if singular {
		object.R.Publishers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &publisherR{}
			}
			foreign.R.ContentUnits = append(foreign.R.ContentUnits, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Publishers = append(local.R.Publishers, foreign)
				if foreign.R == nil {
					foreign.R = &publisherR{}
				}
				foreign.R.ContentUnits = append(foreign.R.ContentUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadSources allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadSources(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"sources\".id, \"sources\".uid, \"sources\".parent_id, \"sources\".pattern, \"sources\".type_id, \"sources\".position, \"sources\".name, \"sources\".description, \"sources\".created_at, \"sources\".properties, \"a\".\"content_unit_id\""),
		qm.From("\"sources\""),
		qm.InnerJoin("\"content_units_sources\" as \"a\" on \"sources\".\"id\" = \"a\".\"source_id\""),
		qm.WhereIn("\"a\".\"content_unit_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sources")
	}

	var resultSlice []*Source

	var localJoinCols []int64
	for results.Next() {
		one := new(Source)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.UID, &one.ParentID, &one.Pattern, &one.TypeID, &one.Position, &one.Name, &one.Description, &one.CreatedAt, &one.Properties, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for sources")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice sources")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sources")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sources")
	}

	if singular {
		object.R.Sources = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sourceR{}
			}
			foreign.R.ContentUnits = append(foreign.R.ContentUnits, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Sources = append(local.R.Sources, foreign)
				if foreign.R == nil {
					foreign.R = &sourceR{}
				}
				foreign.R.ContentUnits = append(foreign.R.ContentUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadTags(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"tags\".id, \"tags\".description, \"tags\".parent_id, \"tags\".uid, \"tags\".pattern, \"a\".\"content_unit_id\""),
		qm.From("\"tags\""),
		qm.InnerJoin("\"content_units_tags\" as \"a\" on \"tags\".\"id\" = \"a\".\"tag_id\""),
		qm.WhereIn("\"a\".\"content_unit_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tags")
	}

	var resultSlice []*Tag

	var localJoinCols []int64
	for results.Next() {
		one := new(Tag)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Description, &one.ParentID, &one.UID, &one.Pattern, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tags")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tags")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.ContentUnits = append(foreign.R.ContentUnits, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.ContentUnits = append(foreign.R.ContentUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadFiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadFiles(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`files`),
		qm.WhereIn(`files.content_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load files")
	}

	var resultSlice []*File
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice files")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for files")
	}

	if singular {
		object.R.Files = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fileR{}
			}
			foreign.R.ContentUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ContentUnitID) {
				local.R.Files = append(local.R.Files, foreign)
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.ContentUnit = local
				break
			}
		}
	}

	return nil
}

// LoadLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentUnitL) LoadLabels(e boil.Executor, singular bool, maybeContentUnit interface{}, mods queries.Applicator) error {
	var slice []*ContentUnit
	var object *ContentUnit

	if singular {
		object = maybeContentUnit.(*ContentUnit)
	} else {
		slice = *maybeContentUnit.(*[]*ContentUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`labels`),
		qm.WhereIn(`labels.content_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load labels")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if singular {
		object.R.Labels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &labelR{}
			}
			foreign.R.ContentUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentUnitID {
				local.R.Labels = append(local.R.Labels, foreign)
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.ContentUnit = local
				break
			}
		}
	}

	return nil
}

// SetType of the contentUnit to the related item.
// Sets o.R.Type to related.
// Adds o to related.R.TypeContentUnits.
func (o *ContentUnit) SetType(exec boil.Executor, insert bool, related *ContentType) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TypeID = related.ID
	if o.R == nil {
		o.R = &contentUnitR{
			Type: related,
		}
	} else {
		o.R.Type = related
	}

	if related.R == nil {
		related.R = &contentTypeR{
			TypeContentUnits: ContentUnitSlice{o},
		}
	} else {
		related.R.TypeContentUnits = append(related.R.TypeContentUnits, o)
	}

	return nil
}

// AddCollectionsContentUnits adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.CollectionsContentUnits.
// Sets related.R.ContentUnit appropriately.
func (o *ContentUnit) AddCollectionsContentUnits(exec boil.Executor, insert bool, related ...*CollectionsContentUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentUnitID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"collections_content_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, collectionsContentUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CollectionID, rel.ContentUnitID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentUnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentUnitR{
			CollectionsContentUnits: related,
		}
	} else {
		o.R.CollectionsContentUnits = append(o.R.CollectionsContentUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionsContentUnitR{
				ContentUnit: o,
			}
		} else {
			rel.R.ContentUnit = o
		}
	}
	return nil
}

// AddDerivedContentUnitDerivations adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.DerivedContentUnitDerivations.
// Sets related.R.Derived appropriately.
func (o *ContentUnit) AddDerivedContentUnitDerivations(exec boil.Executor, insert bool, related ...*ContentUnitDerivation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DerivedID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"content_unit_derivations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"derived_id"}),
				strmangle.WhereClause("\"", "\"", 2, contentUnitDerivationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SourceID, rel.DerivedID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DerivedID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentUnitR{
			DerivedContentUnitDerivations: related,
		}
	} else {
		o.R.DerivedContentUnitDerivations = append(o.R.DerivedContentUnitDerivations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contentUnitDerivationR{
				Derived: o,
			}
		} else {
			rel.R.Derived = o
		}
	}
	return nil
}

// AddSourceContentUnitDerivations adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.SourceContentUnitDerivations.
// Sets related.R.Source appropriately.
func (o *ContentUnit) AddSourceContentUnitDerivations(exec boil.Executor, insert bool, related ...*ContentUnitDerivation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SourceID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"content_unit_derivations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"source_id"}),
				strmangle.WhereClause("\"", "\"", 2, contentUnitDerivationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SourceID, rel.DerivedID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SourceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentUnitR{
			SourceContentUnitDerivations: related,
		}
	} else {
		o.R.SourceContentUnitDerivations = append(o.R.SourceContentUnitDerivations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contentUnitDerivationR{
				Source: o,
			}
		} else {
			rel.R.Source = o
		}
	}
	return nil
}

// AddContentUnitI18ns adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.ContentUnitI18ns.
// Sets related.R.ContentUnit appropriately.
func (o *ContentUnit) AddContentUnitI18ns(exec boil.Executor, insert bool, related ...*ContentUnitI18n) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentUnitID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"content_unit_i18n\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, contentUnitI18nPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ContentUnitID, rel.Language}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentUnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentUnitR{
			ContentUnitI18ns: related,
		}
	} else {
		o.R.ContentUnitI18ns = append(o.R.ContentUnitI18ns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contentUnitI18nR{
				ContentUnit: o,
			}
		} else {
			rel.R.ContentUnit = o
		}
	}
	return nil
}

// AddContentUnitsPersons adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.ContentUnitsPersons.
// Sets related.R.ContentUnit appropriately.
func (o *ContentUnit) AddContentUnitsPersons(exec boil.Executor, insert bool, related ...*ContentUnitsPerson) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentUnitID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"content_units_persons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, contentUnitsPersonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ContentUnitID, rel.PersonID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentUnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentUnitR{
			ContentUnitsPersons: related,
		}
	} else {
		o.R.ContentUnitsPersons = append(o.R.ContentUnitsPersons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contentUnitsPersonR{
				ContentUnit: o,
			}
		} else {
			rel.R.ContentUnit = o
		}
	}
	return nil
}

// AddPublishers adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.Publishers.
// Sets related.R.ContentUnits appropriately.
func (o *ContentUnit) AddPublishers(exec boil.Executor, insert bool, related ...*Publisher) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"content_units_publishers\" (\"content_unit_id\", \"publisher_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &contentUnitR{
			Publishers: related,
		}
	} else {
		o.R.Publishers = append(o.R.Publishers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &publisherR{
				ContentUnits: ContentUnitSlice{o},
			}
		} else {
			rel.R.ContentUnits = append(rel.R.ContentUnits, o)
		}
	}
	return nil
}

// SetPublishers removes all previously related items of the
// content_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentUnits's Publishers accordingly.
// Replaces o.R.Publishers with related.
// Sets related.R.ContentUnits's Publishers accordingly.
func (o *ContentUnit) SetPublishers(exec boil.Executor, insert bool, related ...*Publisher) error {
	query := "delete from \"content_units_publishers\" where \"content_unit_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePublishersFromContentUnitsSlice(o, related)
	if o.R != nil {
		o.R.Publishers = nil
	}
	return o.AddPublishers(exec, insert, related...)
}

// RemovePublishers relationships from objects passed in.
// Removes related items from R.Publishers (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentUnits.
func (o *ContentUnit) RemovePublishers(exec boil.Executor, related ...*Publisher) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"content_units_publishers\" where \"content_unit_id\" = $1 and \"publisher_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePublishersFromContentUnitsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Publishers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Publishers)
			if ln > 1 && i < ln-1 {
				o.R.Publishers[i] = o.R.Publishers[ln-1]
			}
			o.R.Publishers = o.R.Publishers[:ln-1]
			break
		}
	}

	return nil
}

func removePublishersFromContentUnitsSlice(o *ContentUnit, related []*Publisher) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ContentUnits {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ContentUnits)
			if ln > 1 && i < ln-1 {
				rel.R.ContentUnits[i] = rel.R.ContentUnits[ln-1]
			}
			rel.R.ContentUnits = rel.R.ContentUnits[:ln-1]
			break
		}
	}
}

// AddSources adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.Sources.
// Sets related.R.ContentUnits appropriately.
func (o *ContentUnit) AddSources(exec boil.Executor, insert bool, related ...*Source) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"content_units_sources\" (\"content_unit_id\", \"source_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &contentUnitR{
			Sources: related,
		}
	} else {
		o.R.Sources = append(o.R.Sources, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sourceR{
				ContentUnits: ContentUnitSlice{o},
			}
		} else {
			rel.R.ContentUnits = append(rel.R.ContentUnits, o)
		}
	}
	return nil
}

// SetSources removes all previously related items of the
// content_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentUnits's Sources accordingly.
// Replaces o.R.Sources with related.
// Sets related.R.ContentUnits's Sources accordingly.
func (o *ContentUnit) SetSources(exec boil.Executor, insert bool, related ...*Source) error {
	query := "delete from \"content_units_sources\" where \"content_unit_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSourcesFromContentUnitsSlice(o, related)
	if o.R != nil {
		o.R.Sources = nil
	}
	return o.AddSources(exec, insert, related...)
}

// RemoveSources relationships from objects passed in.
// Removes related items from R.Sources (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentUnits.
func (o *ContentUnit) RemoveSources(exec boil.Executor, related ...*Source) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"content_units_sources\" where \"content_unit_id\" = $1 and \"source_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSourcesFromContentUnitsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Sources {
			if rel != ri {
				continue
			}

			ln := len(o.R.Sources)
			if ln > 1 && i < ln-1 {
				o.R.Sources[i] = o.R.Sources[ln-1]
			}
			o.R.Sources = o.R.Sources[:ln-1]
			break
		}
	}

	return nil
}

func removeSourcesFromContentUnitsSlice(o *ContentUnit, related []*Source) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ContentUnits {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ContentUnits)
			if ln > 1 && i < ln-1 {
				rel.R.ContentUnits[i] = rel.R.ContentUnits[ln-1]
			}
			rel.R.ContentUnits = rel.R.ContentUnits[:ln-1]
			break
		}
	}
}

// AddTags adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.ContentUnits appropriately.
func (o *ContentUnit) AddTags(exec boil.Executor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"content_units_tags\" (\"content_unit_id\", \"tag_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &contentUnitR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				ContentUnits: ContentUnitSlice{o},
			}
		} else {
			rel.R.ContentUnits = append(rel.R.ContentUnits, o)
		}
	}
	return nil
}

// SetTags removes all previously related items of the
// content_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentUnits's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.ContentUnits's Tags accordingly.
func (o *ContentUnit) SetTags(exec boil.Executor, insert bool, related ...*Tag) error {
	query := "delete from \"content_units_tags\" where \"content_unit_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromContentUnitsSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(exec, insert, related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentUnits.
func (o *ContentUnit) RemoveTags(exec boil.Executor, related ...*Tag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"content_units_tags\" where \"content_unit_id\" = $1 and \"tag_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromContentUnitsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromContentUnitsSlice(o *ContentUnit, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ContentUnits {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ContentUnits)
			if ln > 1 && i < ln-1 {
				rel.R.ContentUnits[i] = rel.R.ContentUnits[ln-1]
			}
			rel.R.ContentUnits = rel.R.ContentUnits[:ln-1]
			break
		}
	}
}

// AddFiles adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.Files.
// Sets related.R.ContentUnit appropriately.
func (o *ContentUnit) AddFiles(exec boil.Executor, insert bool, related ...*File) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ContentUnitID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"files\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, filePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ContentUnitID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &contentUnitR{
			Files: related,
		}
	} else {
		o.R.Files = append(o.R.Files, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fileR{
				ContentUnit: o,
			}
		} else {
			rel.R.ContentUnit = o
		}
	}
	return nil
}

// SetFiles removes all previously related items of the
// content_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentUnit's Files accordingly.
// Replaces o.R.Files with related.
// Sets related.R.ContentUnit's Files accordingly.
func (o *ContentUnit) SetFiles(exec boil.Executor, insert bool, related ...*File) error {
	query := "update \"files\" set \"content_unit_id\" = null where \"content_unit_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Files {
			queries.SetScanner(&rel.ContentUnitID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ContentUnit = nil
		}

		o.R.Files = nil
	}
	return o.AddFiles(exec, insert, related...)
}

// RemoveFiles relationships from objects passed in.
// Removes related items from R.Files (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentUnit.
func (o *ContentUnit) RemoveFiles(exec boil.Executor, related ...*File) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ContentUnitID, nil)
		if rel.R != nil {
			rel.R.ContentUnit = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("content_unit_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Files {
			if rel != ri {
				continue
			}

			ln := len(o.R.Files)
			if ln > 1 && i < ln-1 {
				o.R.Files[i] = o.R.Files[ln-1]
			}
			o.R.Files = o.R.Files[:ln-1]
			break
		}
	}

	return nil
}

// AddLabels adds the given related objects to the existing relationships
// of the content_unit, optionally inserting them as new records.
// Appends related to o.R.Labels.
// Sets related.R.ContentUnit appropriately.
func (o *ContentUnit) AddLabels(exec boil.Executor, insert bool, related ...*Label) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentUnitID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, labelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentUnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentUnitR{
			Labels: related,
		}
	} else {
		o.R.Labels = append(o.R.Labels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &labelR{
				ContentUnit: o,
			}
		} else {
			rel.R.ContentUnit = o
		}
	}
	return nil
}

// ContentUnits retrieves all the records using an executor.
func ContentUnits(mods ...qm.QueryMod) contentUnitQuery {
	mods = append(mods, qm.From("\"content_units\""))
	return contentUnitQuery{NewQuery(mods...)}
}

// FindContentUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentUnit(exec boil.Executor, iD int64, selectCols ...string) (*ContentUnit, error) {
	contentUnitObj := &ContentUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"content_units\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, contentUnitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mdbmodels: unable to select from content_units")
	}

	return contentUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentUnit) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no content_units provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(contentUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentUnitInsertCacheMut.RLock()
	cache, cached := contentUnitInsertCache[key]
	contentUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentUnitAllColumns,
			contentUnitColumnsWithDefault,
			contentUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentUnitType, contentUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentUnitType, contentUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"content_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"content_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to insert into content_units")
	}

	if !cached {
		contentUnitInsertCacheMut.Lock()
		contentUnitInsertCache[key] = cache
		contentUnitInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ContentUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentUnit) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	contentUnitUpdateCacheMut.RLock()
	cache, cached := contentUnitUpdateCache[key]
	contentUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentUnitAllColumns,
			contentUnitPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("mdbmodels: unable to update content_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"content_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contentUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentUnitType, contentUnitMapping, append(wl, contentUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update content_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by update for content_units")
	}

	if !cached {
		contentUnitUpdateCacheMut.Lock()
		contentUnitUpdateCache[key] = cache
		contentUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q contentUnitQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all for content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected for content_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentUnitSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mdbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"content_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contentUnitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to update all in contentUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to retrieve rows affected all in update all contentUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContentUnit) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mdbmodels: no content_units provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(contentUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentUnitUpsertCacheMut.RLock()
	cache, cached := contentUnitUpsertCache[key]
	contentUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contentUnitAllColumns,
			contentUnitColumnsWithDefault,
			contentUnitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentUnitAllColumns,
			contentUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("mdbmodels: unable to upsert content_units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(contentUnitPrimaryKeyColumns))
			copy(conflict, contentUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"content_units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(contentUnitType, contentUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentUnitType, contentUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to upsert content_units")
	}

	if !cached {
		contentUnitUpsertCacheMut.Lock()
		contentUnitUpsertCache[key] = cache
		contentUnitUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ContentUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentUnit) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("mdbmodels: no ContentUnit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"content_units\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete from content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by delete for content_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contentUnitQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mdbmodels: no contentUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for content_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentUnitSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"content_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentUnitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: unable to delete all from contentUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mdbmodels: failed to get rows affected by deleteall for content_units")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentUnit) Reload(exec boil.Executor) error {
	ret, err := FindContentUnit(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentUnitSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"content_units\".* FROM \"content_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mdbmodels: unable to reload all in ContentUnitSlice")
	}

	*o = slice

	return nil
}

// ContentUnitExists checks if the ContentUnit row exists.
func ContentUnitExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"content_units\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mdbmodels: unable to check if content_units exists")
	}

	return exists, nil
}
