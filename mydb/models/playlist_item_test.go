// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlaylistItems(t *testing.T) {
	t.Parallel()

	query := PlaylistItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlaylistItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PlaylistItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaylistItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlaylistItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PlaylistItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlaylistItemExists to return true, but got false.")
	}
}

func testPlaylistItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playlistItemFound, err := FindPlaylistItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if playlistItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlaylistItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PlaylistItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlaylistItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PlaylistItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlaylistItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItemOne := &PlaylistItem{}
	playlistItemTwo := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItemOne, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistItemTwo, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playlistItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playlistItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlaylistItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlaylistItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playlistItemOne := &PlaylistItem{}
	playlistItemTwo := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItemOne, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistItemTwo, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = playlistItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playlistItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func playlistItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func playlistItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PlaylistItem) error {
	*o = PlaylistItem{}
	return nil
}

func testPlaylistItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PlaylistItem{}
	o := &PlaylistItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, playlistItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PlaylistItem object: %s", err)
	}

	AddPlaylistItemHook(boil.BeforeInsertHook, playlistItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	playlistItemBeforeInsertHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.AfterInsertHook, playlistItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	playlistItemAfterInsertHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.AfterSelectHook, playlistItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	playlistItemAfterSelectHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.BeforeUpdateHook, playlistItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	playlistItemBeforeUpdateHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.AfterUpdateHook, playlistItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	playlistItemAfterUpdateHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.BeforeDeleteHook, playlistItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	playlistItemBeforeDeleteHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.AfterDeleteHook, playlistItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	playlistItemAfterDeleteHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.BeforeUpsertHook, playlistItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	playlistItemBeforeUpsertHooks = []PlaylistItemHook{}

	AddPlaylistItemHook(boil.AfterUpsertHook, playlistItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	playlistItemAfterUpsertHooks = []PlaylistItemHook{}
}

func testPlaylistItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(playlistItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistItemToOnePlaylistUsingPlaylist(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PlaylistItem
	var foreign Playlist

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlaylistID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Playlist().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlaylistItemSlice{&local}
	if err = local.L.LoadPlaylist(ctx, tx, false, (*[]*PlaylistItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Playlist == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Playlist = nil
	if err = local.L.LoadPlaylist(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Playlist == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlaylistItemToOneSetOpPlaylistUsingPlaylist(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PlaylistItem
	var b, c Playlist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistItemDBTypes, false, strmangle.SetComplement(playlistItemPrimaryKeyColumns, playlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Playlist{&b, &c} {
		err = a.SetPlaylist(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Playlist != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlaylistItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlaylistID != x.ID {
			t.Error("foreign key was wrong value", a.PlaylistID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlaylistID))
		reflect.Indirect(reflect.ValueOf(&a.PlaylistID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlaylistID != x.ID {
			t.Error("foreign key was wrong value", a.PlaylistID, x.ID)
		}
	}
}

func testPlaylistItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlaylistItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PlaylistItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playlistItemDBTypes = map[string]string{`ID`: `bigint`, `PlaylistID`: `bigint`, `Position`: `integer`, `ContentUnitUID`: `character varying`, `AddedAt`: `timestamp with time zone`}
	_                   = bytes.MinRead
)

func testPlaylistItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playlistItemAllColumns) == len(playlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlaylistItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playlistItemAllColumns) == len(playlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PlaylistItem{}
	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playlistItemDBTypes, true, playlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playlistItemAllColumns, playlistItemPrimaryKeyColumns) {
		fields = playlistItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			playlistItemAllColumns,
			playlistItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlaylistItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlaylistItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(playlistItemAllColumns) == len(playlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PlaylistItem{}
	if err = randomize.Struct(seed, &o, playlistItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlaylistItem: %s", err)
	}

	count, err := PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playlistItemDBTypes, false, playlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PlaylistItem: %s", err)
	}

	count, err = PlaylistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
