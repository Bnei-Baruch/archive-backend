// Code generated by SQLBoiler (https://github.com/Bnei-Baruch/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/Bnei-Baruch/sqlboiler/boil"
	"github.com/Bnei-Baruch/sqlboiler/randomize"
	"github.com/Bnei-Baruch/sqlboiler/strmangle"
)

func testPlaylistItems(t *testing.T) {
	t.Parallel()

	query := PlaylistItems(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPlaylistItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = playlistItem.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PlaylistItems(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlaylistItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlaylistItemSlice{playlistItem}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPlaylistItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PlaylistItemExists(tx, playlistItem.ID)
	if err != nil {
		t.Errorf("Unable to check if PlaylistItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlaylistItemExistsG to return true, but got false.")
	}
}
func testPlaylistItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	playlistItemFound, err := FindPlaylistItem(tx, playlistItem.ID)
	if err != nil {
		t.Error(err)
	}

	if playlistItemFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPlaylistItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PlaylistItems(tx).Bind(playlistItem); err != nil {
		t.Error(err)
	}
}

func testPlaylistItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PlaylistItems(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlaylistItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItemOne := &PlaylistItem{}
	playlistItemTwo := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItemOne, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistItemTwo, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItemOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playlistItemTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PlaylistItems(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlaylistItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playlistItemOne := &PlaylistItem{}
	playlistItemTwo := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItemOne, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}
	if err = randomize.Struct(seed, playlistItemTwo, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItemOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playlistItemTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPlaylistItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx, playlistItemColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlaylistItemToOnePlaylistUsingPlaylist(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local PlaylistItem
	var foreign Playlist

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playlistItemDBTypes, false, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playlistDBTypes, false, playlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Playlist struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.PlaylistID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Playlist(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlaylistItemSlice{&local}
	if err = local.L.LoadPlaylist(tx, false, (*[]*PlaylistItem)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Playlist == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Playlist = nil
	if err = local.L.LoadPlaylist(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Playlist == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlaylistItemToOneSetOpPlaylistUsingPlaylist(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a PlaylistItem
	var b, c Playlist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playlistItemDBTypes, false, strmangle.SetComplement(playlistItemPrimaryKeyColumns, playlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playlistDBTypes, false, strmangle.SetComplement(playlistPrimaryKeyColumns, playlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Playlist{&b, &c} {
		err = a.SetPlaylist(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Playlist != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlaylistItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlaylistID != x.ID {
			t.Error("foreign key was wrong value", a.PlaylistID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlaylistID))
		reflect.Indirect(reflect.ValueOf(&a.PlaylistID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlaylistID != x.ID {
			t.Error("foreign key was wrong value", a.PlaylistID, x.ID)
		}
	}
}
func testPlaylistItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = playlistItem.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlaylistItemSlice{playlistItem}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPlaylistItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PlaylistItems(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playlistItemDBTypes = map[string]string{`AddedAt`: `timestamp with time zone`, `ContentUnitUID`: `character varying`, `ID`: `bigint`, `PlaylistID`: `bigint`, `Position`: `integer`}
	_                   = bytes.MinRead
)

func testPlaylistItemsUpdate(t *testing.T) {
	t.Parallel()

	if len(playlistItemColumns) == len(playlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	if err = playlistItem.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPlaylistItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playlistItemColumns) == len(playlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	playlistItem := &PlaylistItem{}
	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, playlistItem, playlistItemDBTypes, true, playlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playlistItemColumns, playlistItemPrimaryKeyColumns) {
		fields = playlistItemColumns
	} else {
		fields = strmangle.SetComplement(
			playlistItemColumns,
			playlistItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(playlistItem))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PlaylistItemSlice{playlistItem}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPlaylistItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(playlistItemColumns) == len(playlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	playlistItem := PlaylistItem{}
	if err = randomize.Struct(seed, &playlistItem, playlistItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playlistItem.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert PlaylistItem: %s", err)
	}

	count, err := PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &playlistItem, playlistItemDBTypes, false, playlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PlaylistItem struct: %s", err)
	}

	if err = playlistItem.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert PlaylistItem: %s", err)
	}

	count, err = PlaylistItems(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
